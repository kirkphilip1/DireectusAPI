# coding: utf-8

"""
    Dynamic API Specification

    This is a dynamically generated API specification for all endpoints existing on the current project.  # noqa: E501

    OpenAPI spec version: 10.10.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RelationsIdBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'collection_many': 'str',
        'collection_one': 'str',
        'field_many': 'str',
        'field_one': 'str',
        'junction_field': 'str'
    }

    attribute_map = {
        'collection_many': 'collection_many',
        'collection_one': 'collection_one',
        'field_many': 'field_many',
        'field_one': 'field_one',
        'junction_field': 'junction_field'
    }

    def __init__(self, collection_many=None, collection_one=None, field_many=None, field_one=None, junction_field=None):  # noqa: E501
        """RelationsIdBody - a model defined in Swagger"""  # noqa: E501
        self._collection_many = None
        self._collection_one = None
        self._field_many = None
        self._field_one = None
        self._junction_field = None
        self.discriminator = None
        if collection_many is not None:
            self.collection_many = collection_many
        if collection_one is not None:
            self.collection_one = collection_one
        if field_many is not None:
            self.field_many = field_many
        if field_one is not None:
            self.field_one = field_one
        if junction_field is not None:
            self.junction_field = junction_field

    @property
    def collection_many(self):
        """Gets the collection_many of this RelationsIdBody.  # noqa: E501

        Collection that has the field that holds the foreign key.  # noqa: E501

        :return: The collection_many of this RelationsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._collection_many

    @collection_many.setter
    def collection_many(self, collection_many):
        """Sets the collection_many of this RelationsIdBody.

        Collection that has the field that holds the foreign key.  # noqa: E501

        :param collection_many: The collection_many of this RelationsIdBody.  # noqa: E501
        :type: str
        """

        self._collection_many = collection_many

    @property
    def collection_one(self):
        """Gets the collection_one of this RelationsIdBody.  # noqa: E501

        Collection on the _one_ side of the relationship.  # noqa: E501

        :return: The collection_one of this RelationsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._collection_one

    @collection_one.setter
    def collection_one(self, collection_one):
        """Sets the collection_one of this RelationsIdBody.

        Collection on the _one_ side of the relationship.  # noqa: E501

        :param collection_one: The collection_one of this RelationsIdBody.  # noqa: E501
        :type: str
        """

        self._collection_one = collection_one

    @property
    def field_many(self):
        """Gets the field_many of this RelationsIdBody.  # noqa: E501

        Foreign key. Field that holds the primary key of the related collection.  # noqa: E501

        :return: The field_many of this RelationsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._field_many

    @field_many.setter
    def field_many(self, field_many):
        """Sets the field_many of this RelationsIdBody.

        Foreign key. Field that holds the primary key of the related collection.  # noqa: E501

        :param field_many: The field_many of this RelationsIdBody.  # noqa: E501
        :type: str
        """

        self._field_many = field_many

    @property
    def field_one(self):
        """Gets the field_one of this RelationsIdBody.  # noqa: E501

        Alias column that serves as the _one_ side of the relationship.  # noqa: E501

        :return: The field_one of this RelationsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._field_one

    @field_one.setter
    def field_one(self, field_one):
        """Sets the field_one of this RelationsIdBody.

        Alias column that serves as the _one_ side of the relationship.  # noqa: E501

        :param field_one: The field_one of this RelationsIdBody.  # noqa: E501
        :type: str
        """

        self._field_one = field_one

    @property
    def junction_field(self):
        """Gets the junction_field of this RelationsIdBody.  # noqa: E501

        Field on the junction table that holds the primary key of the related collection.  # noqa: E501

        :return: The junction_field of this RelationsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._junction_field

    @junction_field.setter
    def junction_field(self, junction_field):
        """Sets the junction_field of this RelationsIdBody.

        Field on the junction table that holds the primary key of the related collection.  # noqa: E501

        :param junction_field: The junction_field of this RelationsIdBody.  # noqa: E501
        :type: str
        """

        self._junction_field = junction_field

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RelationsIdBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RelationsIdBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
