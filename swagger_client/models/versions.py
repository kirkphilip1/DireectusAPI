# coding: utf-8

"""
    Dynamic API Specification

    This is a dynamically generated API specification for all endpoints existing on the current project.  # noqa: E501

    OpenAPI spec version: 10.10.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Versions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'key': 'str',
        'name': 'str',
        'collection': 'OneOfVersionsCollection',
        'item': 'str',
        'hash': 'str',
        'date_created': 'datetime',
        'date_updated': 'datetime',
        'user_created': 'OneOfVersionsUserCreated',
        'user_updated': 'OneOfVersionsUserUpdated'
    }

    attribute_map = {
        'id': 'id',
        'key': 'key',
        'name': 'name',
        'collection': 'collection',
        'item': 'item',
        'hash': 'hash',
        'date_created': 'date_created',
        'date_updated': 'date_updated',
        'user_created': 'user_created',
        'user_updated': 'user_updated'
    }

    def __init__(self, id=None, key=None, name=None, collection=None, item=None, hash=None, date_created=None, date_updated=None, user_created=None, user_updated=None):  # noqa: E501
        """Versions - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._key = None
        self._name = None
        self._collection = None
        self._item = None
        self._hash = None
        self._date_created = None
        self._date_updated = None
        self._user_created = None
        self._user_updated = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if key is not None:
            self.key = key
        if name is not None:
            self.name = name
        if collection is not None:
            self.collection = collection
        if item is not None:
            self.item = item
        if hash is not None:
            self.hash = hash
        if date_created is not None:
            self.date_created = date_created
        if date_updated is not None:
            self.date_updated = date_updated
        if user_created is not None:
            self.user_created = user_created
        if user_updated is not None:
            self.user_updated = user_updated

    @property
    def id(self):
        """Gets the id of this Versions.  # noqa: E501

        Primary key of the Content Version.  # noqa: E501

        :return: The id of this Versions.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Versions.

        Primary key of the Content Version.  # noqa: E501

        :param id: The id of this Versions.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def key(self):
        """Gets the key of this Versions.  # noqa: E501

        Key of the Content Version, used as the value for the \"version\" query parameter.  # noqa: E501

        :return: The key of this Versions.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Versions.

        Key of the Content Version, used as the value for the \"version\" query parameter.  # noqa: E501

        :param key: The key of this Versions.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this Versions.  # noqa: E501

        Descriptive name of the Content Version.  # noqa: E501

        :return: The name of this Versions.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Versions.

        Descriptive name of the Content Version.  # noqa: E501

        :param name: The name of this Versions.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def collection(self):
        """Gets the collection of this Versions.  # noqa: E501

        Name of the collection the Content Version is created on.  # noqa: E501

        :return: The collection of this Versions.  # noqa: E501
        :rtype: OneOfVersionsCollection
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this Versions.

        Name of the collection the Content Version is created on.  # noqa: E501

        :param collection: The collection of this Versions.  # noqa: E501
        :type: OneOfVersionsCollection
        """

        self._collection = collection

    @property
    def item(self):
        """Gets the item of this Versions.  # noqa: E501

        The item the Content Version is created on.  # noqa: E501

        :return: The item of this Versions.  # noqa: E501
        :rtype: str
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this Versions.

        The item the Content Version is created on.  # noqa: E501

        :param item: The item of this Versions.  # noqa: E501
        :type: str
        """

        self._item = item

    @property
    def hash(self):
        """Gets the hash of this Versions.  # noqa: E501


        :return: The hash of this Versions.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this Versions.


        :param hash: The hash of this Versions.  # noqa: E501
        :type: str
        """

        self._hash = hash

    @property
    def date_created(self):
        """Gets the date_created of this Versions.  # noqa: E501

        When the Content Version was created.  # noqa: E501

        :return: The date_created of this Versions.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this Versions.

        When the Content Version was created.  # noqa: E501

        :param date_created: The date_created of this Versions.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this Versions.  # noqa: E501

        When the Content Version was updated.  # noqa: E501

        :return: The date_updated of this Versions.  # noqa: E501
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this Versions.

        When the Content Version was updated.  # noqa: E501

        :param date_updated: The date_updated of this Versions.  # noqa: E501
        :type: datetime
        """

        self._date_updated = date_updated

    @property
    def user_created(self):
        """Gets the user_created of this Versions.  # noqa: E501

        User that created the Content Version.  # noqa: E501

        :return: The user_created of this Versions.  # noqa: E501
        :rtype: OneOfVersionsUserCreated
        """
        return self._user_created

    @user_created.setter
    def user_created(self, user_created):
        """Sets the user_created of this Versions.

        User that created the Content Version.  # noqa: E501

        :param user_created: The user_created of this Versions.  # noqa: E501
        :type: OneOfVersionsUserCreated
        """

        self._user_created = user_created

    @property
    def user_updated(self):
        """Gets the user_updated of this Versions.  # noqa: E501

        User that updated the Content Version.  # noqa: E501

        :return: The user_updated of this Versions.  # noqa: E501
        :rtype: OneOfVersionsUserUpdated
        """
        return self._user_updated

    @user_updated.setter
    def user_updated(self, user_updated):
        """Sets the user_updated of this Versions.

        User that updated the Content Version.  # noqa: E501

        :param user_updated: The user_updated of this Versions.  # noqa: E501
        :type: OneOfVersionsUserUpdated
        """

        self._user_updated = user_updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Versions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Versions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
