# coding: utf-8

"""
    Dynamic API Specification

    This is a dynamically generated API specification for all endpoints existing on the current project.  # noqa: E501

    OpenAPI spec version: 10.10.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Webhooks(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'method': 'str',
        'url': 'str',
        'status': 'str',
        'data': 'bool',
        'actions': 'list[str]',
        'collections': 'list[str]',
        'headers': 'object',
        'was_active_before_deprecation': 'bool',
        'migrated_flow': 'OneOfWebhooksMigratedFlow'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'method': 'method',
        'url': 'url',
        'status': 'status',
        'data': 'data',
        'actions': 'actions',
        'collections': 'collections',
        'headers': 'headers',
        'was_active_before_deprecation': 'was_active_before_deprecation',
        'migrated_flow': 'migrated_flow'
    }

    def __init__(self, id=None, name=None, method=None, url=None, status=None, data=None, actions=None, collections=None, headers=None, was_active_before_deprecation=None, migrated_flow=None):  # noqa: E501
        """Webhooks - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._method = None
        self._url = None
        self._status = None
        self._data = None
        self._actions = None
        self._collections = None
        self._headers = None
        self._was_active_before_deprecation = None
        self._migrated_flow = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if method is not None:
            self.method = method
        if url is not None:
            self.url = url
        if status is not None:
            self.status = status
        if data is not None:
            self.data = data
        if actions is not None:
            self.actions = actions
        if collections is not None:
            self.collections = collections
        if headers is not None:
            self.headers = headers
        if was_active_before_deprecation is not None:
            self.was_active_before_deprecation = was_active_before_deprecation
        if migrated_flow is not None:
            self.migrated_flow = migrated_flow

    @property
    def id(self):
        """Gets the id of this Webhooks.  # noqa: E501

        The index of the webhook.  # noqa: E501

        :return: The id of this Webhooks.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Webhooks.

        The index of the webhook.  # noqa: E501

        :param id: The id of this Webhooks.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Webhooks.  # noqa: E501

        The name of the webhook.  # noqa: E501

        :return: The name of this Webhooks.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Webhooks.

        The name of the webhook.  # noqa: E501

        :param name: The name of this Webhooks.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def method(self):
        """Gets the method of this Webhooks.  # noqa: E501

        Method used in the webhook.  # noqa: E501

        :return: The method of this Webhooks.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this Webhooks.

        Method used in the webhook.  # noqa: E501

        :param method: The method of this Webhooks.  # noqa: E501
        :type: str
        """

        self._method = method

    @property
    def url(self):
        """Gets the url of this Webhooks.  # noqa: E501

        The url of the webhook.  # noqa: E501

        :return: The url of this Webhooks.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Webhooks.

        The url of the webhook.  # noqa: E501

        :param url: The url of this Webhooks.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def status(self):
        """Gets the status of this Webhooks.  # noqa: E501

        The status of the webhook.  # noqa: E501

        :return: The status of this Webhooks.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Webhooks.

        The status of the webhook.  # noqa: E501

        :param status: The status of this Webhooks.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def data(self):
        """Gets the data of this Webhooks.  # noqa: E501

        If yes, send the content of what was done  # noqa: E501

        :return: The data of this Webhooks.  # noqa: E501
        :rtype: bool
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Webhooks.

        If yes, send the content of what was done  # noqa: E501

        :param data: The data of this Webhooks.  # noqa: E501
        :type: bool
        """

        self._data = data

    @property
    def actions(self):
        """Gets the actions of this Webhooks.  # noqa: E501

        The actions that triggers this webhook.  # noqa: E501

        :return: The actions of this Webhooks.  # noqa: E501
        :rtype: list[str]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this Webhooks.

        The actions that triggers this webhook.  # noqa: E501

        :param actions: The actions of this Webhooks.  # noqa: E501
        :type: list[str]
        """

        self._actions = actions

    @property
    def collections(self):
        """Gets the collections of this Webhooks.  # noqa: E501


        :return: The collections of this Webhooks.  # noqa: E501
        :rtype: list[str]
        """
        return self._collections

    @collections.setter
    def collections(self, collections):
        """Sets the collections of this Webhooks.


        :param collections: The collections of this Webhooks.  # noqa: E501
        :type: list[str]
        """

        self._collections = collections

    @property
    def headers(self):
        """Gets the headers of this Webhooks.  # noqa: E501


        :return: The headers of this Webhooks.  # noqa: E501
        :rtype: object
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this Webhooks.


        :param headers: The headers of this Webhooks.  # noqa: E501
        :type: object
        """

        self._headers = headers

    @property
    def was_active_before_deprecation(self):
        """Gets the was_active_before_deprecation of this Webhooks.  # noqa: E501


        :return: The was_active_before_deprecation of this Webhooks.  # noqa: E501
        :rtype: bool
        """
        return self._was_active_before_deprecation

    @was_active_before_deprecation.setter
    def was_active_before_deprecation(self, was_active_before_deprecation):
        """Sets the was_active_before_deprecation of this Webhooks.


        :param was_active_before_deprecation: The was_active_before_deprecation of this Webhooks.  # noqa: E501
        :type: bool
        """

        self._was_active_before_deprecation = was_active_before_deprecation

    @property
    def migrated_flow(self):
        """Gets the migrated_flow of this Webhooks.  # noqa: E501


        :return: The migrated_flow of this Webhooks.  # noqa: E501
        :rtype: OneOfWebhooksMigratedFlow
        """
        return self._migrated_flow

    @migrated_flow.setter
    def migrated_flow(self, migrated_flow):
        """Sets the migrated_flow of this Webhooks.


        :param migrated_flow: The migrated_flow of this Webhooks.  # noqa: E501
        :type: OneOfWebhooksMigratedFlow
        """

        self._migrated_flow = migrated_flow

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Webhooks, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Webhooks):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
