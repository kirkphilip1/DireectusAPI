# coding: utf-8

"""
    Dynamic API Specification

    This is a dynamically generated API specification for all endpoints existing on the current project.  # noqa: E501

    OpenAPI spec version: 10.10.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FieldscollectionSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'table': 'str',
        'type': 'str',
        'default_value': 'str',
        'max_length': 'int',
        'is_nullable': 'bool',
        'is_primary_key': 'bool',
        'has_auto_increment': 'bool',
        'foreign_key_column': 'str',
        'foreign_key_table': 'str',
        'comment': 'str',
        'schema': 'str',
        'foreign_key_schema': 'str'
    }

    attribute_map = {
        'name': 'name',
        'table': 'table',
        'type': 'type',
        'default_value': 'default_value',
        'max_length': 'max_length',
        'is_nullable': 'is_nullable',
        'is_primary_key': 'is_primary_key',
        'has_auto_increment': 'has_auto_increment',
        'foreign_key_column': 'foreign_key_column',
        'foreign_key_table': 'foreign_key_table',
        'comment': 'comment',
        'schema': 'schema',
        'foreign_key_schema': 'foreign_key_schema'
    }

    def __init__(self, name=None, table=None, type=None, default_value=None, max_length=None, is_nullable=None, is_primary_key=None, has_auto_increment=None, foreign_key_column=None, foreign_key_table=None, comment=None, schema=None, foreign_key_schema=None):  # noqa: E501
        """FieldscollectionSchema - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._table = None
        self._type = None
        self._default_value = None
        self._max_length = None
        self._is_nullable = None
        self._is_primary_key = None
        self._has_auto_increment = None
        self._foreign_key_column = None
        self._foreign_key_table = None
        self._comment = None
        self._schema = None
        self._foreign_key_schema = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if table is not None:
            self.table = table
        if type is not None:
            self.type = type
        if default_value is not None:
            self.default_value = default_value
        if max_length is not None:
            self.max_length = max_length
        if is_nullable is not None:
            self.is_nullable = is_nullable
        if is_primary_key is not None:
            self.is_primary_key = is_primary_key
        if has_auto_increment is not None:
            self.has_auto_increment = has_auto_increment
        if foreign_key_column is not None:
            self.foreign_key_column = foreign_key_column
        if foreign_key_table is not None:
            self.foreign_key_table = foreign_key_table
        if comment is not None:
            self.comment = comment
        if schema is not None:
            self.schema = schema
        if foreign_key_schema is not None:
            self.foreign_key_schema = foreign_key_schema

    @property
    def name(self):
        """Gets the name of this FieldscollectionSchema.  # noqa: E501

        The name of the field.  # noqa: E501

        :return: The name of this FieldscollectionSchema.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FieldscollectionSchema.

        The name of the field.  # noqa: E501

        :param name: The name of this FieldscollectionSchema.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def table(self):
        """Gets the table of this FieldscollectionSchema.  # noqa: E501

        The collection of the field.  # noqa: E501

        :return: The table of this FieldscollectionSchema.  # noqa: E501
        :rtype: str
        """
        return self._table

    @table.setter
    def table(self, table):
        """Sets the table of this FieldscollectionSchema.

        The collection of the field.  # noqa: E501

        :param table: The table of this FieldscollectionSchema.  # noqa: E501
        :type: str
        """

        self._table = table

    @property
    def type(self):
        """Gets the type of this FieldscollectionSchema.  # noqa: E501

        The type of the field.  # noqa: E501

        :return: The type of this FieldscollectionSchema.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FieldscollectionSchema.

        The type of the field.  # noqa: E501

        :param type: The type of this FieldscollectionSchema.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def default_value(self):
        """Gets the default_value of this FieldscollectionSchema.  # noqa: E501

        The default value of the field.  # noqa: E501

        :return: The default_value of this FieldscollectionSchema.  # noqa: E501
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this FieldscollectionSchema.

        The default value of the field.  # noqa: E501

        :param default_value: The default_value of this FieldscollectionSchema.  # noqa: E501
        :type: str
        """

        self._default_value = default_value

    @property
    def max_length(self):
        """Gets the max_length of this FieldscollectionSchema.  # noqa: E501

        The max length of the field.  # noqa: E501

        :return: The max_length of this FieldscollectionSchema.  # noqa: E501
        :rtype: int
        """
        return self._max_length

    @max_length.setter
    def max_length(self, max_length):
        """Sets the max_length of this FieldscollectionSchema.

        The max length of the field.  # noqa: E501

        :param max_length: The max_length of this FieldscollectionSchema.  # noqa: E501
        :type: int
        """

        self._max_length = max_length

    @property
    def is_nullable(self):
        """Gets the is_nullable of this FieldscollectionSchema.  # noqa: E501

        If the field is nullable.  # noqa: E501

        :return: The is_nullable of this FieldscollectionSchema.  # noqa: E501
        :rtype: bool
        """
        return self._is_nullable

    @is_nullable.setter
    def is_nullable(self, is_nullable):
        """Sets the is_nullable of this FieldscollectionSchema.

        If the field is nullable.  # noqa: E501

        :param is_nullable: The is_nullable of this FieldscollectionSchema.  # noqa: E501
        :type: bool
        """

        self._is_nullable = is_nullable

    @property
    def is_primary_key(self):
        """Gets the is_primary_key of this FieldscollectionSchema.  # noqa: E501

        If the field is primary key.  # noqa: E501

        :return: The is_primary_key of this FieldscollectionSchema.  # noqa: E501
        :rtype: bool
        """
        return self._is_primary_key

    @is_primary_key.setter
    def is_primary_key(self, is_primary_key):
        """Sets the is_primary_key of this FieldscollectionSchema.

        If the field is primary key.  # noqa: E501

        :param is_primary_key: The is_primary_key of this FieldscollectionSchema.  # noqa: E501
        :type: bool
        """

        self._is_primary_key = is_primary_key

    @property
    def has_auto_increment(self):
        """Gets the has_auto_increment of this FieldscollectionSchema.  # noqa: E501

        If the field has auto increment.  # noqa: E501

        :return: The has_auto_increment of this FieldscollectionSchema.  # noqa: E501
        :rtype: bool
        """
        return self._has_auto_increment

    @has_auto_increment.setter
    def has_auto_increment(self, has_auto_increment):
        """Sets the has_auto_increment of this FieldscollectionSchema.

        If the field has auto increment.  # noqa: E501

        :param has_auto_increment: The has_auto_increment of this FieldscollectionSchema.  # noqa: E501
        :type: bool
        """

        self._has_auto_increment = has_auto_increment

    @property
    def foreign_key_column(self):
        """Gets the foreign_key_column of this FieldscollectionSchema.  # noqa: E501

        Related column from the foreign key constraint.  # noqa: E501

        :return: The foreign_key_column of this FieldscollectionSchema.  # noqa: E501
        :rtype: str
        """
        return self._foreign_key_column

    @foreign_key_column.setter
    def foreign_key_column(self, foreign_key_column):
        """Sets the foreign_key_column of this FieldscollectionSchema.

        Related column from the foreign key constraint.  # noqa: E501

        :param foreign_key_column: The foreign_key_column of this FieldscollectionSchema.  # noqa: E501
        :type: str
        """

        self._foreign_key_column = foreign_key_column

    @property
    def foreign_key_table(self):
        """Gets the foreign_key_table of this FieldscollectionSchema.  # noqa: E501

        Related table from the foreign key constraint.  # noqa: E501

        :return: The foreign_key_table of this FieldscollectionSchema.  # noqa: E501
        :rtype: str
        """
        return self._foreign_key_table

    @foreign_key_table.setter
    def foreign_key_table(self, foreign_key_table):
        """Sets the foreign_key_table of this FieldscollectionSchema.

        Related table from the foreign key constraint.  # noqa: E501

        :param foreign_key_table: The foreign_key_table of this FieldscollectionSchema.  # noqa: E501
        :type: str
        """

        self._foreign_key_table = foreign_key_table

    @property
    def comment(self):
        """Gets the comment of this FieldscollectionSchema.  # noqa: E501

        Comment as saved in the database.  # noqa: E501

        :return: The comment of this FieldscollectionSchema.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this FieldscollectionSchema.

        Comment as saved in the database.  # noqa: E501

        :param comment: The comment of this FieldscollectionSchema.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def schema(self):
        """Gets the schema of this FieldscollectionSchema.  # noqa: E501

        Database schema (pg only).  # noqa: E501

        :return: The schema of this FieldscollectionSchema.  # noqa: E501
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this FieldscollectionSchema.

        Database schema (pg only).  # noqa: E501

        :param schema: The schema of this FieldscollectionSchema.  # noqa: E501
        :type: str
        """

        self._schema = schema

    @property
    def foreign_key_schema(self):
        """Gets the foreign_key_schema of this FieldscollectionSchema.  # noqa: E501

        Related schema from the foreign key constraint (pg only).  # noqa: E501

        :return: The foreign_key_schema of this FieldscollectionSchema.  # noqa: E501
        :rtype: str
        """
        return self._foreign_key_schema

    @foreign_key_schema.setter
    def foreign_key_schema(self, foreign_key_schema):
        """Sets the foreign_key_schema of this FieldscollectionSchema.

        Related schema from the foreign key constraint (pg only).  # noqa: E501

        :param foreign_key_schema: The foreign_key_schema of this FieldscollectionSchema.  # noqa: E501
        :type: str
        """

        self._foreign_key_schema = foreign_key_schema

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FieldscollectionSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FieldscollectionSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
