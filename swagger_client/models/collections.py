# coding: utf-8

"""
    Dynamic API Specification

    This is a dynamically generated API specification for all endpoints existing on the current project.  # noqa: E501

    OpenAPI spec version: 10.10.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Collections(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'collection': 'str',
        'icon': 'str',
        'note': 'str',
        'display_template': 'str',
        'hidden': 'bool',
        'singleton': 'bool',
        'translations': 'object',
        'archive_field': 'str',
        'archive_app_filter': 'bool',
        'archive_value': 'str',
        'unarchive_value': 'str',
        'sort_field': 'str',
        'accountability': 'str',
        'color': 'str',
        'item_duplication_fields': 'object',
        'sort': 'int',
        'group': 'OneOfCollectionsGroup',
        'collapse': 'str',
        'preview_url': 'str',
        'versioning': 'bool'
    }

    attribute_map = {
        'collection': 'collection',
        'icon': 'icon',
        'note': 'note',
        'display_template': 'display_template',
        'hidden': 'hidden',
        'singleton': 'singleton',
        'translations': 'translations',
        'archive_field': 'archive_field',
        'archive_app_filter': 'archive_app_filter',
        'archive_value': 'archive_value',
        'unarchive_value': 'unarchive_value',
        'sort_field': 'sort_field',
        'accountability': 'accountability',
        'color': 'color',
        'item_duplication_fields': 'item_duplication_fields',
        'sort': 'sort',
        'group': 'group',
        'collapse': 'collapse',
        'preview_url': 'preview_url',
        'versioning': 'versioning'
    }

    def __init__(self, collection=None, icon=None, note=None, display_template=None, hidden=None, singleton=None, translations=None, archive_field=None, archive_app_filter=None, archive_value=None, unarchive_value=None, sort_field=None, accountability=None, color=None, item_duplication_fields=None, sort=None, group=None, collapse=None, preview_url=None, versioning=None):  # noqa: E501
        """Collections - a model defined in Swagger"""  # noqa: E501
        self._collection = None
        self._icon = None
        self._note = None
        self._display_template = None
        self._hidden = None
        self._singleton = None
        self._translations = None
        self._archive_field = None
        self._archive_app_filter = None
        self._archive_value = None
        self._unarchive_value = None
        self._sort_field = None
        self._accountability = None
        self._color = None
        self._item_duplication_fields = None
        self._sort = None
        self._group = None
        self._collapse = None
        self._preview_url = None
        self._versioning = None
        self.discriminator = None
        if collection is not None:
            self.collection = collection
        if icon is not None:
            self.icon = icon
        if note is not None:
            self.note = note
        if display_template is not None:
            self.display_template = display_template
        if hidden is not None:
            self.hidden = hidden
        if singleton is not None:
            self.singleton = singleton
        if translations is not None:
            self.translations = translations
        if archive_field is not None:
            self.archive_field = archive_field
        if archive_app_filter is not None:
            self.archive_app_filter = archive_app_filter
        if archive_value is not None:
            self.archive_value = archive_value
        if unarchive_value is not None:
            self.unarchive_value = unarchive_value
        if sort_field is not None:
            self.sort_field = sort_field
        if accountability is not None:
            self.accountability = accountability
        if color is not None:
            self.color = color
        if item_duplication_fields is not None:
            self.item_duplication_fields = item_duplication_fields
        if sort is not None:
            self.sort = sort
        if group is not None:
            self.group = group
        if collapse is not None:
            self.collapse = collapse
        if preview_url is not None:
            self.preview_url = preview_url
        if versioning is not None:
            self.versioning = versioning

    @property
    def collection(self):
        """Gets the collection of this Collections.  # noqa: E501

        The collection key.  # noqa: E501

        :return: The collection of this Collections.  # noqa: E501
        :rtype: str
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this Collections.

        The collection key.  # noqa: E501

        :param collection: The collection of this Collections.  # noqa: E501
        :type: str
        """

        self._collection = collection

    @property
    def icon(self):
        """Gets the icon of this Collections.  # noqa: E501


        :return: The icon of this Collections.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this Collections.


        :param icon: The icon of this Collections.  # noqa: E501
        :type: str
        """

        self._icon = icon

    @property
    def note(self):
        """Gets the note of this Collections.  # noqa: E501


        :return: The note of this Collections.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this Collections.


        :param note: The note of this Collections.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def display_template(self):
        """Gets the display_template of this Collections.  # noqa: E501


        :return: The display_template of this Collections.  # noqa: E501
        :rtype: str
        """
        return self._display_template

    @display_template.setter
    def display_template(self, display_template):
        """Sets the display_template of this Collections.


        :param display_template: The display_template of this Collections.  # noqa: E501
        :type: str
        """

        self._display_template = display_template

    @property
    def hidden(self):
        """Gets the hidden of this Collections.  # noqa: E501


        :return: The hidden of this Collections.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this Collections.


        :param hidden: The hidden of this Collections.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    @property
    def singleton(self):
        """Gets the singleton of this Collections.  # noqa: E501


        :return: The singleton of this Collections.  # noqa: E501
        :rtype: bool
        """
        return self._singleton

    @singleton.setter
    def singleton(self, singleton):
        """Sets the singleton of this Collections.


        :param singleton: The singleton of this Collections.  # noqa: E501
        :type: bool
        """

        self._singleton = singleton

    @property
    def translations(self):
        """Gets the translations of this Collections.  # noqa: E501


        :return: The translations of this Collections.  # noqa: E501
        :rtype: object
        """
        return self._translations

    @translations.setter
    def translations(self, translations):
        """Sets the translations of this Collections.


        :param translations: The translations of this Collections.  # noqa: E501
        :type: object
        """

        self._translations = translations

    @property
    def archive_field(self):
        """Gets the archive_field of this Collections.  # noqa: E501


        :return: The archive_field of this Collections.  # noqa: E501
        :rtype: str
        """
        return self._archive_field

    @archive_field.setter
    def archive_field(self, archive_field):
        """Sets the archive_field of this Collections.


        :param archive_field: The archive_field of this Collections.  # noqa: E501
        :type: str
        """

        self._archive_field = archive_field

    @property
    def archive_app_filter(self):
        """Gets the archive_app_filter of this Collections.  # noqa: E501


        :return: The archive_app_filter of this Collections.  # noqa: E501
        :rtype: bool
        """
        return self._archive_app_filter

    @archive_app_filter.setter
    def archive_app_filter(self, archive_app_filter):
        """Sets the archive_app_filter of this Collections.


        :param archive_app_filter: The archive_app_filter of this Collections.  # noqa: E501
        :type: bool
        """

        self._archive_app_filter = archive_app_filter

    @property
    def archive_value(self):
        """Gets the archive_value of this Collections.  # noqa: E501


        :return: The archive_value of this Collections.  # noqa: E501
        :rtype: str
        """
        return self._archive_value

    @archive_value.setter
    def archive_value(self, archive_value):
        """Sets the archive_value of this Collections.


        :param archive_value: The archive_value of this Collections.  # noqa: E501
        :type: str
        """

        self._archive_value = archive_value

    @property
    def unarchive_value(self):
        """Gets the unarchive_value of this Collections.  # noqa: E501


        :return: The unarchive_value of this Collections.  # noqa: E501
        :rtype: str
        """
        return self._unarchive_value

    @unarchive_value.setter
    def unarchive_value(self, unarchive_value):
        """Sets the unarchive_value of this Collections.


        :param unarchive_value: The unarchive_value of this Collections.  # noqa: E501
        :type: str
        """

        self._unarchive_value = unarchive_value

    @property
    def sort_field(self):
        """Gets the sort_field of this Collections.  # noqa: E501


        :return: The sort_field of this Collections.  # noqa: E501
        :rtype: str
        """
        return self._sort_field

    @sort_field.setter
    def sort_field(self, sort_field):
        """Sets the sort_field of this Collections.


        :param sort_field: The sort_field of this Collections.  # noqa: E501
        :type: str
        """

        self._sort_field = sort_field

    @property
    def accountability(self):
        """Gets the accountability of this Collections.  # noqa: E501


        :return: The accountability of this Collections.  # noqa: E501
        :rtype: str
        """
        return self._accountability

    @accountability.setter
    def accountability(self, accountability):
        """Sets the accountability of this Collections.


        :param accountability: The accountability of this Collections.  # noqa: E501
        :type: str
        """

        self._accountability = accountability

    @property
    def color(self):
        """Gets the color of this Collections.  # noqa: E501


        :return: The color of this Collections.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Collections.


        :param color: The color of this Collections.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def item_duplication_fields(self):
        """Gets the item_duplication_fields of this Collections.  # noqa: E501


        :return: The item_duplication_fields of this Collections.  # noqa: E501
        :rtype: object
        """
        return self._item_duplication_fields

    @item_duplication_fields.setter
    def item_duplication_fields(self, item_duplication_fields):
        """Sets the item_duplication_fields of this Collections.


        :param item_duplication_fields: The item_duplication_fields of this Collections.  # noqa: E501
        :type: object
        """

        self._item_duplication_fields = item_duplication_fields

    @property
    def sort(self):
        """Gets the sort of this Collections.  # noqa: E501


        :return: The sort of this Collections.  # noqa: E501
        :rtype: int
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this Collections.


        :param sort: The sort of this Collections.  # noqa: E501
        :type: int
        """

        self._sort = sort

    @property
    def group(self):
        """Gets the group of this Collections.  # noqa: E501


        :return: The group of this Collections.  # noqa: E501
        :rtype: OneOfCollectionsGroup
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Collections.


        :param group: The group of this Collections.  # noqa: E501
        :type: OneOfCollectionsGroup
        """

        self._group = group

    @property
    def collapse(self):
        """Gets the collapse of this Collections.  # noqa: E501


        :return: The collapse of this Collections.  # noqa: E501
        :rtype: str
        """
        return self._collapse

    @collapse.setter
    def collapse(self, collapse):
        """Sets the collapse of this Collections.


        :param collapse: The collapse of this Collections.  # noqa: E501
        :type: str
        """

        self._collapse = collapse

    @property
    def preview_url(self):
        """Gets the preview_url of this Collections.  # noqa: E501


        :return: The preview_url of this Collections.  # noqa: E501
        :rtype: str
        """
        return self._preview_url

    @preview_url.setter
    def preview_url(self, preview_url):
        """Sets the preview_url of this Collections.


        :param preview_url: The preview_url of this Collections.  # noqa: E501
        :type: str
        """

        self._preview_url = preview_url

    @property
    def versioning(self):
        """Gets the versioning of this Collections.  # noqa: E501


        :return: The versioning of this Collections.  # noqa: E501
        :rtype: bool
        """
        return self._versioning

    @versioning.setter
    def versioning(self, versioning):
        """Sets the versioning of this Collections.


        :param versioning: The versioning of this Collections.  # noqa: E501
        :type: bool
        """

        self._versioning = versioning

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Collections, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Collections):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
