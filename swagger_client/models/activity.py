# coding: utf-8

"""
    Dynamic API Specification

    This is a dynamically generated API specification for all endpoints existing on the current project.  # noqa: E501

    OpenAPI spec version: 10.10.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Activity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'action': 'str',
        'user': 'OneOfActivityUser',
        'timestamp': 'datetime',
        'ip': 'OneOfActivityIp',
        'user_agent': 'str',
        'collection': 'OneOfActivityCollection',
        'item': 'str',
        'comment': 'str',
        'origin': 'str',
        'revisions': 'list[OneOfActivityRevisionsItems]'
    }

    attribute_map = {
        'id': 'id',
        'action': 'action',
        'user': 'user',
        'timestamp': 'timestamp',
        'ip': 'ip',
        'user_agent': 'user_agent',
        'collection': 'collection',
        'item': 'item',
        'comment': 'comment',
        'origin': 'origin',
        'revisions': 'revisions'
    }

    def __init__(self, id=None, action=None, user=None, timestamp=None, ip=None, user_agent=None, collection=None, item=None, comment=None, origin=None, revisions=None):  # noqa: E501
        """Activity - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._action = None
        self._user = None
        self._timestamp = None
        self._ip = None
        self._user_agent = None
        self._collection = None
        self._item = None
        self._comment = None
        self._origin = None
        self._revisions = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if action is not None:
            self.action = action
        if user is not None:
            self.user = user
        if timestamp is not None:
            self.timestamp = timestamp
        if ip is not None:
            self.ip = ip
        if user_agent is not None:
            self.user_agent = user_agent
        if collection is not None:
            self.collection = collection
        if item is not None:
            self.item = item
        if comment is not None:
            self.comment = comment
        if origin is not None:
            self.origin = origin
        if revisions is not None:
            self.revisions = revisions

    @property
    def id(self):
        """Gets the id of this Activity.  # noqa: E501

        Unique identifier for the object.  # noqa: E501

        :return: The id of this Activity.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Activity.

        Unique identifier for the object.  # noqa: E501

        :param id: The id of this Activity.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def action(self):
        """Gets the action of this Activity.  # noqa: E501

        Action that was performed.  # noqa: E501

        :return: The action of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this Activity.

        Action that was performed.  # noqa: E501

        :param action: The action of this Activity.  # noqa: E501
        :type: str
        """
        allowed_values = ["create", "update", "delete", "login"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def user(self):
        """Gets the user of this Activity.  # noqa: E501

        The user who performed this action.  # noqa: E501

        :return: The user of this Activity.  # noqa: E501
        :rtype: OneOfActivityUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Activity.

        The user who performed this action.  # noqa: E501

        :param user: The user of this Activity.  # noqa: E501
        :type: OneOfActivityUser
        """

        self._user = user

    @property
    def timestamp(self):
        """Gets the timestamp of this Activity.  # noqa: E501

        When the action happened.  # noqa: E501

        :return: The timestamp of this Activity.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Activity.

        When the action happened.  # noqa: E501

        :param timestamp: The timestamp of this Activity.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def ip(self):
        """Gets the ip of this Activity.  # noqa: E501

        The IP address of the user at the time the action took place.  # noqa: E501

        :return: The ip of this Activity.  # noqa: E501
        :rtype: OneOfActivityIp
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this Activity.

        The IP address of the user at the time the action took place.  # noqa: E501

        :param ip: The ip of this Activity.  # noqa: E501
        :type: OneOfActivityIp
        """

        self._ip = ip

    @property
    def user_agent(self):
        """Gets the user_agent of this Activity.  # noqa: E501

        User agent string of the browser the user used when the action took place.  # noqa: E501

        :return: The user_agent of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this Activity.

        User agent string of the browser the user used when the action took place.  # noqa: E501

        :param user_agent: The user_agent of this Activity.  # noqa: E501
        :type: str
        """

        self._user_agent = user_agent

    @property
    def collection(self):
        """Gets the collection of this Activity.  # noqa: E501

        Collection identifier in which the item resides.  # noqa: E501

        :return: The collection of this Activity.  # noqa: E501
        :rtype: OneOfActivityCollection
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this Activity.

        Collection identifier in which the item resides.  # noqa: E501

        :param collection: The collection of this Activity.  # noqa: E501
        :type: OneOfActivityCollection
        """

        self._collection = collection

    @property
    def item(self):
        """Gets the item of this Activity.  # noqa: E501

        Unique identifier for the item the action applied to. This is always a string, even for integer primary keys.  # noqa: E501

        :return: The item of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this Activity.

        Unique identifier for the item the action applied to. This is always a string, even for integer primary keys.  # noqa: E501

        :param item: The item of this Activity.  # noqa: E501
        :type: str
        """

        self._item = item

    @property
    def comment(self):
        """Gets the comment of this Activity.  # noqa: E501

        User comment. This will store the comments that show up in the right sidebar of the item edit page in the admin app.  # noqa: E501

        :return: The comment of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Activity.

        User comment. This will store the comments that show up in the right sidebar of the item edit page in the admin app.  # noqa: E501

        :param comment: The comment of this Activity.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def origin(self):
        """Gets the origin of this Activity.  # noqa: E501

        Origin of the request when the action took place.  # noqa: E501

        :return: The origin of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this Activity.

        Origin of the request when the action took place.  # noqa: E501

        :param origin: The origin of this Activity.  # noqa: E501
        :type: str
        """

        self._origin = origin

    @property
    def revisions(self):
        """Gets the revisions of this Activity.  # noqa: E501


        :return: The revisions of this Activity.  # noqa: E501
        :rtype: list[OneOfActivityRevisionsItems]
        """
        return self._revisions

    @revisions.setter
    def revisions(self, revisions):
        """Sets the revisions of this Activity.


        :param revisions: The revisions of this Activity.  # noqa: E501
        :type: list[OneOfActivityRevisionsItems]
        """

        self._revisions = revisions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Activity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Activity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
