# coding: utf-8

"""
    Dynamic API Specification

    This is a dynamically generated API specification for all endpoints existing on the current project.  # noqa: E501

    OpenAPI spec version: 10.10.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Files(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'storage': 'str',
        'filename_disk': 'str',
        'filename_download': 'str',
        'title': 'str',
        'type': 'str',
        'folder': 'OneOfFilesFolder',
        'uploaded_by': 'OneOfFilesUploadedBy',
        'uploaded_on': 'datetime',
        'modified_by': 'OneOfFilesModifiedBy',
        'modified_on': 'str',
        'charset': 'str',
        'filesize': 'int',
        'width': 'int',
        'height': 'int',
        'duration': 'int',
        'embed': 'str',
        'description': 'str',
        'location': 'str',
        'tags': 'list[str]',
        'metadata': 'object',
        'focal_point_x': 'int',
        'focal_point_y': 'int'
    }

    attribute_map = {
        'id': 'id',
        'storage': 'storage',
        'filename_disk': 'filename_disk',
        'filename_download': 'filename_download',
        'title': 'title',
        'type': 'type',
        'folder': 'folder',
        'uploaded_by': 'uploaded_by',
        'uploaded_on': 'uploaded_on',
        'modified_by': 'modified_by',
        'modified_on': 'modified_on',
        'charset': 'charset',
        'filesize': 'filesize',
        'width': 'width',
        'height': 'height',
        'duration': 'duration',
        'embed': 'embed',
        'description': 'description',
        'location': 'location',
        'tags': 'tags',
        'metadata': 'metadata',
        'focal_point_x': 'focal_point_x',
        'focal_point_y': 'focal_point_y'
    }

    def __init__(self, id=None, storage=None, filename_disk=None, filename_download=None, title=None, type=None, folder=None, uploaded_by=None, uploaded_on=None, modified_by=None, modified_on=None, charset=None, filesize=None, width=None, height=None, duration=None, embed=None, description=None, location=None, tags=None, metadata=None, focal_point_x=None, focal_point_y=None):  # noqa: E501
        """Files - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._storage = None
        self._filename_disk = None
        self._filename_download = None
        self._title = None
        self._type = None
        self._folder = None
        self._uploaded_by = None
        self._uploaded_on = None
        self._modified_by = None
        self._modified_on = None
        self._charset = None
        self._filesize = None
        self._width = None
        self._height = None
        self._duration = None
        self._embed = None
        self._description = None
        self._location = None
        self._tags = None
        self._metadata = None
        self._focal_point_x = None
        self._focal_point_y = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if storage is not None:
            self.storage = storage
        if filename_disk is not None:
            self.filename_disk = filename_disk
        if filename_download is not None:
            self.filename_download = filename_download
        if title is not None:
            self.title = title
        if type is not None:
            self.type = type
        if folder is not None:
            self.folder = folder
        if uploaded_by is not None:
            self.uploaded_by = uploaded_by
        if uploaded_on is not None:
            self.uploaded_on = uploaded_on
        if modified_by is not None:
            self.modified_by = modified_by
        if modified_on is not None:
            self.modified_on = modified_on
        if charset is not None:
            self.charset = charset
        if filesize is not None:
            self.filesize = filesize
        if width is not None:
            self.width = width
        if height is not None:
            self.height = height
        if duration is not None:
            self.duration = duration
        if embed is not None:
            self.embed = embed
        if description is not None:
            self.description = description
        if location is not None:
            self.location = location
        if tags is not None:
            self.tags = tags
        if metadata is not None:
            self.metadata = metadata
        if focal_point_x is not None:
            self.focal_point_x = focal_point_x
        if focal_point_y is not None:
            self.focal_point_y = focal_point_y

    @property
    def id(self):
        """Gets the id of this Files.  # noqa: E501

        Unique identifier for the file.  # noqa: E501

        :return: The id of this Files.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Files.

        Unique identifier for the file.  # noqa: E501

        :param id: The id of this Files.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def storage(self):
        """Gets the storage of this Files.  # noqa: E501

        Where the file is stored. Either `local` for the local filesystem or the name of the storage adapter (for example `s3`).  # noqa: E501

        :return: The storage of this Files.  # noqa: E501
        :rtype: str
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this Files.

        Where the file is stored. Either `local` for the local filesystem or the name of the storage adapter (for example `s3`).  # noqa: E501

        :param storage: The storage of this Files.  # noqa: E501
        :type: str
        """

        self._storage = storage

    @property
    def filename_disk(self):
        """Gets the filename_disk of this Files.  # noqa: E501

        Name of the file on disk. By default, Directus uses a random hash for the filename.  # noqa: E501

        :return: The filename_disk of this Files.  # noqa: E501
        :rtype: str
        """
        return self._filename_disk

    @filename_disk.setter
    def filename_disk(self, filename_disk):
        """Sets the filename_disk of this Files.

        Name of the file on disk. By default, Directus uses a random hash for the filename.  # noqa: E501

        :param filename_disk: The filename_disk of this Files.  # noqa: E501
        :type: str
        """

        self._filename_disk = filename_disk

    @property
    def filename_download(self):
        """Gets the filename_download of this Files.  # noqa: E501

        How you want to the file to be named when it's being downloaded.  # noqa: E501

        :return: The filename_download of this Files.  # noqa: E501
        :rtype: str
        """
        return self._filename_download

    @filename_download.setter
    def filename_download(self, filename_download):
        """Sets the filename_download of this Files.

        How you want to the file to be named when it's being downloaded.  # noqa: E501

        :param filename_download: The filename_download of this Files.  # noqa: E501
        :type: str
        """

        self._filename_download = filename_download

    @property
    def title(self):
        """Gets the title of this Files.  # noqa: E501

        Title for the file. Is extracted from the filename on upload, but can be edited by the user.  # noqa: E501

        :return: The title of this Files.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Files.

        Title for the file. Is extracted from the filename on upload, but can be edited by the user.  # noqa: E501

        :param title: The title of this Files.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this Files.  # noqa: E501

        MIME type of the file.  # noqa: E501

        :return: The type of this Files.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Files.

        MIME type of the file.  # noqa: E501

        :param type: The type of this Files.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def folder(self):
        """Gets the folder of this Files.  # noqa: E501

        Virtual folder where this file resides in.  # noqa: E501

        :return: The folder of this Files.  # noqa: E501
        :rtype: OneOfFilesFolder
        """
        return self._folder

    @folder.setter
    def folder(self, folder):
        """Sets the folder of this Files.

        Virtual folder where this file resides in.  # noqa: E501

        :param folder: The folder of this Files.  # noqa: E501
        :type: OneOfFilesFolder
        """

        self._folder = folder

    @property
    def uploaded_by(self):
        """Gets the uploaded_by of this Files.  # noqa: E501

        Who uploaded the file.  # noqa: E501

        :return: The uploaded_by of this Files.  # noqa: E501
        :rtype: OneOfFilesUploadedBy
        """
        return self._uploaded_by

    @uploaded_by.setter
    def uploaded_by(self, uploaded_by):
        """Sets the uploaded_by of this Files.

        Who uploaded the file.  # noqa: E501

        :param uploaded_by: The uploaded_by of this Files.  # noqa: E501
        :type: OneOfFilesUploadedBy
        """

        self._uploaded_by = uploaded_by

    @property
    def uploaded_on(self):
        """Gets the uploaded_on of this Files.  # noqa: E501

        When the file was uploaded.  # noqa: E501

        :return: The uploaded_on of this Files.  # noqa: E501
        :rtype: datetime
        """
        return self._uploaded_on

    @uploaded_on.setter
    def uploaded_on(self, uploaded_on):
        """Sets the uploaded_on of this Files.

        When the file was uploaded.  # noqa: E501

        :param uploaded_on: The uploaded_on of this Files.  # noqa: E501
        :type: datetime
        """

        self._uploaded_on = uploaded_on

    @property
    def modified_by(self):
        """Gets the modified_by of this Files.  # noqa: E501


        :return: The modified_by of this Files.  # noqa: E501
        :rtype: OneOfFilesModifiedBy
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this Files.


        :param modified_by: The modified_by of this Files.  # noqa: E501
        :type: OneOfFilesModifiedBy
        """

        self._modified_by = modified_by

    @property
    def modified_on(self):
        """Gets the modified_on of this Files.  # noqa: E501


        :return: The modified_on of this Files.  # noqa: E501
        :rtype: str
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """Sets the modified_on of this Files.


        :param modified_on: The modified_on of this Files.  # noqa: E501
        :type: str
        """

        self._modified_on = modified_on

    @property
    def charset(self):
        """Gets the charset of this Files.  # noqa: E501

        Character set of the file.  # noqa: E501

        :return: The charset of this Files.  # noqa: E501
        :rtype: str
        """
        return self._charset

    @charset.setter
    def charset(self, charset):
        """Sets the charset of this Files.

        Character set of the file.  # noqa: E501

        :param charset: The charset of this Files.  # noqa: E501
        :type: str
        """

        self._charset = charset

    @property
    def filesize(self):
        """Gets the filesize of this Files.  # noqa: E501

        Size of the file in bytes.  # noqa: E501

        :return: The filesize of this Files.  # noqa: E501
        :rtype: int
        """
        return self._filesize

    @filesize.setter
    def filesize(self, filesize):
        """Sets the filesize of this Files.

        Size of the file in bytes.  # noqa: E501

        :param filesize: The filesize of this Files.  # noqa: E501
        :type: int
        """

        self._filesize = filesize

    @property
    def width(self):
        """Gets the width of this Files.  # noqa: E501

        Width of the file in pixels. Only applies to images.  # noqa: E501

        :return: The width of this Files.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Files.

        Width of the file in pixels. Only applies to images.  # noqa: E501

        :param width: The width of this Files.  # noqa: E501
        :type: int
        """

        self._width = width

    @property
    def height(self):
        """Gets the height of this Files.  # noqa: E501

        Height of the file in pixels. Only applies to images.  # noqa: E501

        :return: The height of this Files.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Files.

        Height of the file in pixels. Only applies to images.  # noqa: E501

        :param height: The height of this Files.  # noqa: E501
        :type: int
        """

        self._height = height

    @property
    def duration(self):
        """Gets the duration of this Files.  # noqa: E501

        Duration of the file in seconds. Only applies to audio and video.  # noqa: E501

        :return: The duration of this Files.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Files.

        Duration of the file in seconds. Only applies to audio and video.  # noqa: E501

        :param duration: The duration of this Files.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def embed(self):
        """Gets the embed of this Files.  # noqa: E501

        Where the file was embedded from.  # noqa: E501

        :return: The embed of this Files.  # noqa: E501
        :rtype: str
        """
        return self._embed

    @embed.setter
    def embed(self, embed):
        """Sets the embed of this Files.

        Where the file was embedded from.  # noqa: E501

        :param embed: The embed of this Files.  # noqa: E501
        :type: str
        """

        self._embed = embed

    @property
    def description(self):
        """Gets the description of this Files.  # noqa: E501

        Description for the file.  # noqa: E501

        :return: The description of this Files.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Files.

        Description for the file.  # noqa: E501

        :param description: The description of this Files.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def location(self):
        """Gets the location of this Files.  # noqa: E501

        Where the file was created. Is automatically populated based on Exif data for images.  # noqa: E501

        :return: The location of this Files.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Files.

        Where the file was created. Is automatically populated based on Exif data for images.  # noqa: E501

        :param location: The location of this Files.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def tags(self):
        """Gets the tags of this Files.  # noqa: E501

        Tags for the file. Is automatically populated based on Exif data for images.  # noqa: E501

        :return: The tags of this Files.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Files.

        Tags for the file. Is automatically populated based on Exif data for images.  # noqa: E501

        :param tags: The tags of this Files.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def metadata(self):
        """Gets the metadata of this Files.  # noqa: E501

        IPTC, Exif, and ICC metadata extracted from file  # noqa: E501

        :return: The metadata of this Files.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Files.

        IPTC, Exif, and ICC metadata extracted from file  # noqa: E501

        :param metadata: The metadata of this Files.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    @property
    def focal_point_x(self):
        """Gets the focal_point_x of this Files.  # noqa: E501


        :return: The focal_point_x of this Files.  # noqa: E501
        :rtype: int
        """
        return self._focal_point_x

    @focal_point_x.setter
    def focal_point_x(self, focal_point_x):
        """Sets the focal_point_x of this Files.


        :param focal_point_x: The focal_point_x of this Files.  # noqa: E501
        :type: int
        """

        self._focal_point_x = focal_point_x

    @property
    def focal_point_y(self):
        """Gets the focal_point_y of this Files.  # noqa: E501


        :return: The focal_point_y of this Files.  # noqa: E501
        :rtype: int
        """
        return self._focal_point_y

    @focal_point_y.setter
    def focal_point_y(self, focal_point_y):
        """Sets the focal_point_y of this Files.


        :param focal_point_y: The focal_point_y of this Files.  # noqa: E501
        :type: int
        """

        self._focal_point_y = focal_point_y

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Files, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Files):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
