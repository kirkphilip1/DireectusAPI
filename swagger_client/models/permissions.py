# coding: utf-8

"""
    Dynamic API Specification

    This is a dynamically generated API specification for all endpoints existing on the current project.  # noqa: E501

    OpenAPI spec version: 10.10.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Permissions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'role': 'str',
        'collection': 'str',
        'action': 'str',
        'permissions': 'object',
        'validation': 'object',
        'presets': 'object',
        'fields': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'role': 'role',
        'collection': 'collection',
        'action': 'action',
        'permissions': 'permissions',
        'validation': 'validation',
        'presets': 'presets',
        'fields': 'fields'
    }

    def __init__(self, id=None, role=None, collection=None, action=None, permissions=None, validation=None, presets=None, fields=None):  # noqa: E501
        """Permissions - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._role = None
        self._collection = None
        self._action = None
        self._permissions = None
        self._validation = None
        self._presets = None
        self._fields = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if role is not None:
            self.role = role
        if collection is not None:
            self.collection = collection
        if action is not None:
            self.action = action
        if permissions is not None:
            self.permissions = permissions
        if validation is not None:
            self.validation = validation
        if presets is not None:
            self.presets = presets
        if fields is not None:
            self.fields = fields

    @property
    def id(self):
        """Gets the id of this Permissions.  # noqa: E501

        Unique identifier for the permission.  # noqa: E501

        :return: The id of this Permissions.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Permissions.

        Unique identifier for the permission.  # noqa: E501

        :param id: The id of this Permissions.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def role(self):
        """Gets the role of this Permissions.  # noqa: E501

        Unique identifier of the role this permission applies to.  # noqa: E501

        :return: The role of this Permissions.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Permissions.

        Unique identifier of the role this permission applies to.  # noqa: E501

        :param role: The role of this Permissions.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def collection(self):
        """Gets the collection of this Permissions.  # noqa: E501

        What collection this permission applies to.  # noqa: E501

        :return: The collection of this Permissions.  # noqa: E501
        :rtype: str
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this Permissions.

        What collection this permission applies to.  # noqa: E501

        :param collection: The collection of this Permissions.  # noqa: E501
        :type: str
        """

        self._collection = collection

    @property
    def action(self):
        """Gets the action of this Permissions.  # noqa: E501

        What action this permission applies to.  # noqa: E501

        :return: The action of this Permissions.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this Permissions.

        What action this permission applies to.  # noqa: E501

        :param action: The action of this Permissions.  # noqa: E501
        :type: str
        """
        allowed_values = ["create", "read", "update", "delete"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def permissions(self):
        """Gets the permissions of this Permissions.  # noqa: E501

        JSON structure containing the permissions checks for this permission.  # noqa: E501

        :return: The permissions of this Permissions.  # noqa: E501
        :rtype: object
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this Permissions.

        JSON structure containing the permissions checks for this permission.  # noqa: E501

        :param permissions: The permissions of this Permissions.  # noqa: E501
        :type: object
        """

        self._permissions = permissions

    @property
    def validation(self):
        """Gets the validation of this Permissions.  # noqa: E501

        JSON structure containing the validation checks for this permission.  # noqa: E501

        :return: The validation of this Permissions.  # noqa: E501
        :rtype: object
        """
        return self._validation

    @validation.setter
    def validation(self, validation):
        """Sets the validation of this Permissions.

        JSON structure containing the validation checks for this permission.  # noqa: E501

        :param validation: The validation of this Permissions.  # noqa: E501
        :type: object
        """

        self._validation = validation

    @property
    def presets(self):
        """Gets the presets of this Permissions.  # noqa: E501

        JSON structure containing the preset value for created/updated items.  # noqa: E501

        :return: The presets of this Permissions.  # noqa: E501
        :rtype: object
        """
        return self._presets

    @presets.setter
    def presets(self, presets):
        """Sets the presets of this Permissions.

        JSON structure containing the preset value for created/updated items.  # noqa: E501

        :param presets: The presets of this Permissions.  # noqa: E501
        :type: object
        """

        self._presets = presets

    @property
    def fields(self):
        """Gets the fields of this Permissions.  # noqa: E501

        CSV of fields that the user is allowed to interact with.  # noqa: E501

        :return: The fields of this Permissions.  # noqa: E501
        :rtype: list[str]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this Permissions.

        CSV of fields that the user is allowed to interact with.  # noqa: E501

        :param fields: The fields of this Permissions.  # noqa: E501
        :type: list[str]
        """

        self._fields = fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Permissions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Permissions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
