# coding: utf-8

"""
    Dynamic API Specification

    This is a dynamically generated API specification for all endpoints existing on the current project.  # noqa: E501

    OpenAPI spec version: 10.10.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Roles(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'icon': 'str',
        'description': 'str',
        'ip_access': 'list[str]',
        'enforce_tfa': 'bool',
        'admin_access': 'bool',
        'app_access': 'bool',
        'users': 'list[OneOfRolesUsersItems]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'icon': 'icon',
        'description': 'description',
        'ip_access': 'ip_access',
        'enforce_tfa': 'enforce_tfa',
        'admin_access': 'admin_access',
        'app_access': 'app_access',
        'users': 'users'
    }

    def __init__(self, id=None, name=None, icon=None, description=None, ip_access=None, enforce_tfa=None, admin_access=None, app_access=None, users=None):  # noqa: E501
        """Roles - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._icon = None
        self._description = None
        self._ip_access = None
        self._enforce_tfa = None
        self._admin_access = None
        self._app_access = None
        self._users = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if icon is not None:
            self.icon = icon
        if description is not None:
            self.description = description
        if ip_access is not None:
            self.ip_access = ip_access
        if enforce_tfa is not None:
            self.enforce_tfa = enforce_tfa
        if admin_access is not None:
            self.admin_access = admin_access
        if app_access is not None:
            self.app_access = app_access
        if users is not None:
            self.users = users

    @property
    def id(self):
        """Gets the id of this Roles.  # noqa: E501

        Unique identifier for the role.  # noqa: E501

        :return: The id of this Roles.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Roles.

        Unique identifier for the role.  # noqa: E501

        :param id: The id of this Roles.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Roles.  # noqa: E501

        Name of the role.  # noqa: E501

        :return: The name of this Roles.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Roles.

        Name of the role.  # noqa: E501

        :param name: The name of this Roles.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def icon(self):
        """Gets the icon of this Roles.  # noqa: E501

        The role's icon.  # noqa: E501

        :return: The icon of this Roles.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this Roles.

        The role's icon.  # noqa: E501

        :param icon: The icon of this Roles.  # noqa: E501
        :type: str
        """

        self._icon = icon

    @property
    def description(self):
        """Gets the description of this Roles.  # noqa: E501

        Description of the role.  # noqa: E501

        :return: The description of this Roles.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Roles.

        Description of the role.  # noqa: E501

        :param description: The description of this Roles.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def ip_access(self):
        """Gets the ip_access of this Roles.  # noqa: E501

        Array of IP addresses that are allowed to connect to the API as a user of this role.  # noqa: E501

        :return: The ip_access of this Roles.  # noqa: E501
        :rtype: list[str]
        """
        return self._ip_access

    @ip_access.setter
    def ip_access(self, ip_access):
        """Sets the ip_access of this Roles.

        Array of IP addresses that are allowed to connect to the API as a user of this role.  # noqa: E501

        :param ip_access: The ip_access of this Roles.  # noqa: E501
        :type: list[str]
        """

        self._ip_access = ip_access

    @property
    def enforce_tfa(self):
        """Gets the enforce_tfa of this Roles.  # noqa: E501

        Whether or not this role enforces the use of 2FA.  # noqa: E501

        :return: The enforce_tfa of this Roles.  # noqa: E501
        :rtype: bool
        """
        return self._enforce_tfa

    @enforce_tfa.setter
    def enforce_tfa(self, enforce_tfa):
        """Sets the enforce_tfa of this Roles.

        Whether or not this role enforces the use of 2FA.  # noqa: E501

        :param enforce_tfa: The enforce_tfa of this Roles.  # noqa: E501
        :type: bool
        """

        self._enforce_tfa = enforce_tfa

    @property
    def admin_access(self):
        """Gets the admin_access of this Roles.  # noqa: E501

        Admin role. If true, skips all permission checks.  # noqa: E501

        :return: The admin_access of this Roles.  # noqa: E501
        :rtype: bool
        """
        return self._admin_access

    @admin_access.setter
    def admin_access(self, admin_access):
        """Sets the admin_access of this Roles.

        Admin role. If true, skips all permission checks.  # noqa: E501

        :param admin_access: The admin_access of this Roles.  # noqa: E501
        :type: bool
        """

        self._admin_access = admin_access

    @property
    def app_access(self):
        """Gets the app_access of this Roles.  # noqa: E501

        The users in the role are allowed to use the app.  # noqa: E501

        :return: The app_access of this Roles.  # noqa: E501
        :rtype: bool
        """
        return self._app_access

    @app_access.setter
    def app_access(self, app_access):
        """Sets the app_access of this Roles.

        The users in the role are allowed to use the app.  # noqa: E501

        :param app_access: The app_access of this Roles.  # noqa: E501
        :type: bool
        """

        self._app_access = app_access

    @property
    def users(self):
        """Gets the users of this Roles.  # noqa: E501


        :return: The users of this Roles.  # noqa: E501
        :rtype: list[OneOfRolesUsersItems]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this Roles.


        :param users: The users of this Roles.  # noqa: E501
        :type: list[OneOfRolesUsersItems]
        """

        self._users = users

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Roles, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Roles):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
