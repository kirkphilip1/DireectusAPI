# coding: utf-8

"""
    Dynamic API Specification

    This is a dynamically generated API specification for all endpoints existing on the current project.  # noqa: E501

    OpenAPI spec version: 10.10.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PresetsIdBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'collection': 'str',
        'title': 'str',
        'role': 'int',
        'search_query': 'str',
        'filters': 'list[PresetsidFilters]',
        'view_type': 'str',
        'view_query': 'str',
        'view_options': 'str',
        'translation': 'object'
    }

    attribute_map = {
        'collection': 'collection',
        'title': 'title',
        'role': 'role',
        'search_query': 'search_query',
        'filters': 'filters',
        'view_type': 'view_type',
        'view_query': 'view_query',
        'view_options': 'view_options',
        'translation': 'translation'
    }

    def __init__(self, collection=None, title=None, role=None, search_query=None, filters=None, view_type=None, view_query=None, view_options=None, translation=None):  # noqa: E501
        """PresetsIdBody - a model defined in Swagger"""  # noqa: E501
        self._collection = None
        self._title = None
        self._role = None
        self._search_query = None
        self._filters = None
        self._view_type = None
        self._view_query = None
        self._view_options = None
        self._translation = None
        self.discriminator = None
        self.collection = collection
        if title is not None:
            self.title = title
        if role is not None:
            self.role = role
        if search_query is not None:
            self.search_query = search_query
        if filters is not None:
            self.filters = filters
        if view_type is not None:
            self.view_type = view_type
        if view_query is not None:
            self.view_query = view_query
        if view_options is not None:
            self.view_options = view_options
        if translation is not None:
            self.translation = translation

    @property
    def collection(self):
        """Gets the collection of this PresetsIdBody.  # noqa: E501

        What collection this collection preset is used for.  # noqa: E501

        :return: The collection of this PresetsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this PresetsIdBody.

        What collection this collection preset is used for.  # noqa: E501

        :param collection: The collection of this PresetsIdBody.  # noqa: E501
        :type: str
        """
        if collection is None:
            raise ValueError("Invalid value for `collection`, must not be `None`")  # noqa: E501

        self._collection = collection

    @property
    def title(self):
        """Gets the title of this PresetsIdBody.  # noqa: E501

        Name for the bookmark. If this is set, the collection preset will be considered to be a bookmark.  # noqa: E501

        :return: The title of this PresetsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PresetsIdBody.

        Name for the bookmark. If this is set, the collection preset will be considered to be a bookmark.  # noqa: E501

        :param title: The title of this PresetsIdBody.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def role(self):
        """Gets the role of this PresetsIdBody.  # noqa: E501

        The unique identifier of a role in the platform. If user is null, this will be used to apply the collection preset or bookmark for all users in the role.  # noqa: E501

        :return: The role of this PresetsIdBody.  # noqa: E501
        :rtype: int
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this PresetsIdBody.

        The unique identifier of a role in the platform. If user is null, this will be used to apply the collection preset or bookmark for all users in the role.  # noqa: E501

        :param role: The role of this PresetsIdBody.  # noqa: E501
        :type: int
        """

        self._role = role

    @property
    def search_query(self):
        """Gets the search_query of this PresetsIdBody.  # noqa: E501

        What the user searched for in search/filter in the header bar.  # noqa: E501

        :return: The search_query of this PresetsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._search_query

    @search_query.setter
    def search_query(self, search_query):
        """Sets the search_query of this PresetsIdBody.

        What the user searched for in search/filter in the header bar.  # noqa: E501

        :param search_query: The search_query of this PresetsIdBody.  # noqa: E501
        :type: str
        """

        self._search_query = search_query

    @property
    def filters(self):
        """Gets the filters of this PresetsIdBody.  # noqa: E501


        :return: The filters of this PresetsIdBody.  # noqa: E501
        :rtype: list[PresetsidFilters]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this PresetsIdBody.


        :param filters: The filters of this PresetsIdBody.  # noqa: E501
        :type: list[PresetsidFilters]
        """

        self._filters = filters

    @property
    def view_type(self):
        """Gets the view_type of this PresetsIdBody.  # noqa: E501

        Name of the view type that is used. Defaults to tabular.  # noqa: E501

        :return: The view_type of this PresetsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._view_type

    @view_type.setter
    def view_type(self, view_type):
        """Sets the view_type of this PresetsIdBody.

        Name of the view type that is used. Defaults to tabular.  # noqa: E501

        :param view_type: The view_type of this PresetsIdBody.  # noqa: E501
        :type: str
        """

        self._view_type = view_type

    @property
    def view_query(self):
        """Gets the view_query of this PresetsIdBody.  # noqa: E501

        View query that's saved per view type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters.  # noqa: E501

        :return: The view_query of this PresetsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._view_query

    @view_query.setter
    def view_query(self, view_query):
        """Sets the view_query of this PresetsIdBody.

        View query that's saved per view type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters.  # noqa: E501

        :param view_query: The view_query of this PresetsIdBody.  # noqa: E501
        :type: str
        """

        self._view_query = view_query

    @property
    def view_options(self):
        """Gets the view_options of this PresetsIdBody.  # noqa: E501

        Options of the views. The properties in here are controlled by the layout.  # noqa: E501

        :return: The view_options of this PresetsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._view_options

    @view_options.setter
    def view_options(self, view_options):
        """Sets the view_options of this PresetsIdBody.

        Options of the views. The properties in here are controlled by the layout.  # noqa: E501

        :param view_options: The view_options of this PresetsIdBody.  # noqa: E501
        :type: str
        """

        self._view_options = view_options

    @property
    def translation(self):
        """Gets the translation of this PresetsIdBody.  # noqa: E501

        Key value pair of language-translation. Can be used to translate the bookmark title in multiple languages.  # noqa: E501

        :return: The translation of this PresetsIdBody.  # noqa: E501
        :rtype: object
        """
        return self._translation

    @translation.setter
    def translation(self, translation):
        """Sets the translation of this PresetsIdBody.

        Key value pair of language-translation. Can be used to translate the bookmark title in multiple languages.  # noqa: E501

        :param translation: The translation of this PresetsIdBody.  # noqa: E501
        :type: object
        """

        self._translation = translation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PresetsIdBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PresetsIdBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
