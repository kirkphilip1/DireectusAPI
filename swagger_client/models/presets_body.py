# coding: utf-8

"""
    Dynamic API Specification

    This is a dynamically generated API specification for all endpoints existing on the current project.  # noqa: E501

    OpenAPI spec version: 10.10.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PresetsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'collection': 'str',
        'title': 'str',
        'role': 'str',
        'search': 'str',
        'filters': 'list[PresetsFilters]',
        'layout': 'str',
        'layout_query': 'str',
        'layout_options': 'str'
    }

    attribute_map = {
        'collection': 'collection',
        'title': 'title',
        'role': 'role',
        'search': 'search',
        'filters': 'filters',
        'layout': 'layout',
        'layout_query': 'layout_query',
        'layout_options': 'layout_options'
    }

    def __init__(self, collection=None, title=None, role=None, search=None, filters=None, layout=None, layout_query=None, layout_options=None):  # noqa: E501
        """PresetsBody - a model defined in Swagger"""  # noqa: E501
        self._collection = None
        self._title = None
        self._role = None
        self._search = None
        self._filters = None
        self._layout = None
        self._layout_query = None
        self._layout_options = None
        self.discriminator = None
        self.collection = collection
        if title is not None:
            self.title = title
        if role is not None:
            self.role = role
        if search is not None:
            self.search = search
        if filters is not None:
            self.filters = filters
        if layout is not None:
            self.layout = layout
        if layout_query is not None:
            self.layout_query = layout_query
        if layout_options is not None:
            self.layout_options = layout_options

    @property
    def collection(self):
        """Gets the collection of this PresetsBody.  # noqa: E501

        What collection this collection preset is used for.  # noqa: E501

        :return: The collection of this PresetsBody.  # noqa: E501
        :rtype: str
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this PresetsBody.

        What collection this collection preset is used for.  # noqa: E501

        :param collection: The collection of this PresetsBody.  # noqa: E501
        :type: str
        """
        if collection is None:
            raise ValueError("Invalid value for `collection`, must not be `None`")  # noqa: E501

        self._collection = collection

    @property
    def title(self):
        """Gets the title of this PresetsBody.  # noqa: E501

        Name for the bookmark. If this is set, the collection preset will be considered to be a bookmark.  # noqa: E501

        :return: The title of this PresetsBody.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PresetsBody.

        Name for the bookmark. If this is set, the collection preset will be considered to be a bookmark.  # noqa: E501

        :param title: The title of this PresetsBody.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def role(self):
        """Gets the role of this PresetsBody.  # noqa: E501

        The unique identifier of a role in the platform. If user is null, this will be used to apply the collection preset or bookmark for all users in the role.  # noqa: E501

        :return: The role of this PresetsBody.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this PresetsBody.

        The unique identifier of a role in the platform. If user is null, this will be used to apply the collection preset or bookmark for all users in the role.  # noqa: E501

        :param role: The role of this PresetsBody.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def search(self):
        """Gets the search of this PresetsBody.  # noqa: E501

        What the user searched for in search/filter in the header bar.  # noqa: E501

        :return: The search of this PresetsBody.  # noqa: E501
        :rtype: str
        """
        return self._search

    @search.setter
    def search(self, search):
        """Sets the search of this PresetsBody.

        What the user searched for in search/filter in the header bar.  # noqa: E501

        :param search: The search of this PresetsBody.  # noqa: E501
        :type: str
        """

        self._search = search

    @property
    def filters(self):
        """Gets the filters of this PresetsBody.  # noqa: E501


        :return: The filters of this PresetsBody.  # noqa: E501
        :rtype: list[PresetsFilters]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this PresetsBody.


        :param filters: The filters of this PresetsBody.  # noqa: E501
        :type: list[PresetsFilters]
        """

        self._filters = filters

    @property
    def layout(self):
        """Gets the layout of this PresetsBody.  # noqa: E501

        Name of the view type that is used.  # noqa: E501

        :return: The layout of this PresetsBody.  # noqa: E501
        :rtype: str
        """
        return self._layout

    @layout.setter
    def layout(self, layout):
        """Sets the layout of this PresetsBody.

        Name of the view type that is used.  # noqa: E501

        :param layout: The layout of this PresetsBody.  # noqa: E501
        :type: str
        """

        self._layout = layout

    @property
    def layout_query(self):
        """Gets the layout_query of this PresetsBody.  # noqa: E501

        Layout query that's saved per layout type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters.  # noqa: E501

        :return: The layout_query of this PresetsBody.  # noqa: E501
        :rtype: str
        """
        return self._layout_query

    @layout_query.setter
    def layout_query(self, layout_query):
        """Sets the layout_query of this PresetsBody.

        Layout query that's saved per layout type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters.  # noqa: E501

        :param layout_query: The layout_query of this PresetsBody.  # noqa: E501
        :type: str
        """

        self._layout_query = layout_query

    @property
    def layout_options(self):
        """Gets the layout_options of this PresetsBody.  # noqa: E501

        Options of the views. The properties in here are controlled by the layout.  # noqa: E501

        :return: The layout_options of this PresetsBody.  # noqa: E501
        :rtype: str
        """
        return self._layout_options

    @layout_options.setter
    def layout_options(self, layout_options):
        """Sets the layout_options of this PresetsBody.

        Options of the views. The properties in here are controlled by the layout.  # noqa: E501

        :param layout_options: The layout_options of this PresetsBody.  # noqa: E501
        :type: str
        """

        self._layout_options = layout_options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PresetsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PresetsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
