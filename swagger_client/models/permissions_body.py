# coding: utf-8

"""
    Dynamic API Specification

    This is a dynamically generated API specification for all endpoints existing on the current project.  # noqa: E501

    OpenAPI spec version: 10.10.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PermissionsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'collection': 'str',
        'comment': 'str',
        'create': 'str',
        'delete': 'str',
        'explain': 'str',
        'read': 'str',
        'role': 'int',
        'read_field_blacklist': 'list[str]',
        'status': 'str',
        'status_blacklist': 'list[str]',
        'update': 'str',
        'write_field_blacklist': 'list[str]'
    }

    attribute_map = {
        'collection': 'collection',
        'comment': 'comment',
        'create': 'create',
        'delete': 'delete',
        'explain': 'explain',
        'read': 'read',
        'role': 'role',
        'read_field_blacklist': 'read_field_blacklist',
        'status': 'status',
        'status_blacklist': 'status_blacklist',
        'update': 'update',
        'write_field_blacklist': 'write_field_blacklist'
    }

    def __init__(self, collection=None, comment=None, create=None, delete=None, explain=None, read=None, role=None, read_field_blacklist=None, status=None, status_blacklist=None, update=None, write_field_blacklist=None):  # noqa: E501
        """PermissionsBody - a model defined in Swagger"""  # noqa: E501
        self._collection = None
        self._comment = None
        self._create = None
        self._delete = None
        self._explain = None
        self._read = None
        self._role = None
        self._read_field_blacklist = None
        self._status = None
        self._status_blacklist = None
        self._update = None
        self._write_field_blacklist = None
        self.discriminator = None
        if collection is not None:
            self.collection = collection
        if comment is not None:
            self.comment = comment
        if create is not None:
            self.create = create
        if delete is not None:
            self.delete = delete
        if explain is not None:
            self.explain = explain
        if read is not None:
            self.read = read
        if role is not None:
            self.role = role
        if read_field_blacklist is not None:
            self.read_field_blacklist = read_field_blacklist
        if status is not None:
            self.status = status
        if status_blacklist is not None:
            self.status_blacklist = status_blacklist
        if update is not None:
            self.update = update
        if write_field_blacklist is not None:
            self.write_field_blacklist = write_field_blacklist

    @property
    def collection(self):
        """Gets the collection of this PermissionsBody.  # noqa: E501

        What collection this permission applies to.  # noqa: E501

        :return: The collection of this PermissionsBody.  # noqa: E501
        :rtype: str
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this PermissionsBody.

        What collection this permission applies to.  # noqa: E501

        :param collection: The collection of this PermissionsBody.  # noqa: E501
        :type: str
        """

        self._collection = collection

    @property
    def comment(self):
        """Gets the comment of this PermissionsBody.  # noqa: E501

        If the user can post comments.  # noqa: E501

        :return: The comment of this PermissionsBody.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this PermissionsBody.

        If the user can post comments.  # noqa: E501

        :param comment: The comment of this PermissionsBody.  # noqa: E501
        :type: str
        """
        allowed_values = ["none", "create", "update", "full"]  # noqa: E501
        if comment not in allowed_values:
            raise ValueError(
                "Invalid value for `comment` ({0}), must be one of {1}"  # noqa: E501
                .format(comment, allowed_values)
            )

        self._comment = comment

    @property
    def create(self):
        """Gets the create of this PermissionsBody.  # noqa: E501

        If the user can create items.  # noqa: E501

        :return: The create of this PermissionsBody.  # noqa: E501
        :rtype: str
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this PermissionsBody.

        If the user can create items.  # noqa: E501

        :param create: The create of this PermissionsBody.  # noqa: E501
        :type: str
        """
        allowed_values = ["none", "full"]  # noqa: E501
        if create not in allowed_values:
            raise ValueError(
                "Invalid value for `create` ({0}), must be one of {1}"  # noqa: E501
                .format(create, allowed_values)
            )

        self._create = create

    @property
    def delete(self):
        """Gets the delete of this PermissionsBody.  # noqa: E501

        If the user can update items.  # noqa: E501

        :return: The delete of this PermissionsBody.  # noqa: E501
        :rtype: str
        """
        return self._delete

    @delete.setter
    def delete(self, delete):
        """Sets the delete of this PermissionsBody.

        If the user can update items.  # noqa: E501

        :param delete: The delete of this PermissionsBody.  # noqa: E501
        :type: str
        """
        allowed_values = ["none", "mine", "role", "full"]  # noqa: E501
        if delete not in allowed_values:
            raise ValueError(
                "Invalid value for `delete` ({0}), must be one of {1}"  # noqa: E501
                .format(delete, allowed_values)
            )

        self._delete = delete

    @property
    def explain(self):
        """Gets the explain of this PermissionsBody.  # noqa: E501

        If the user is required to leave a comment explaining what was changed.  # noqa: E501

        :return: The explain of this PermissionsBody.  # noqa: E501
        :rtype: str
        """
        return self._explain

    @explain.setter
    def explain(self, explain):
        """Sets the explain of this PermissionsBody.

        If the user is required to leave a comment explaining what was changed.  # noqa: E501

        :param explain: The explain of this PermissionsBody.  # noqa: E501
        :type: str
        """
        allowed_values = ["none", "create", "update", "always"]  # noqa: E501
        if explain not in allowed_values:
            raise ValueError(
                "Invalid value for `explain` ({0}), must be one of {1}"  # noqa: E501
                .format(explain, allowed_values)
            )

        self._explain = explain

    @property
    def read(self):
        """Gets the read of this PermissionsBody.  # noqa: E501

        If the user can read items.  # noqa: E501

        :return: The read of this PermissionsBody.  # noqa: E501
        :rtype: str
        """
        return self._read

    @read.setter
    def read(self, read):
        """Sets the read of this PermissionsBody.

        If the user can read items.  # noqa: E501

        :param read: The read of this PermissionsBody.  # noqa: E501
        :type: str
        """
        allowed_values = ["none", "mine", "role", "full"]  # noqa: E501
        if read not in allowed_values:
            raise ValueError(
                "Invalid value for `read` ({0}), must be one of {1}"  # noqa: E501
                .format(read, allowed_values)
            )

        self._read = read

    @property
    def role(self):
        """Gets the role of this PermissionsBody.  # noqa: E501

        Unique identifier of the role this permission applies to.  # noqa: E501

        :return: The role of this PermissionsBody.  # noqa: E501
        :rtype: int
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this PermissionsBody.

        Unique identifier of the role this permission applies to.  # noqa: E501

        :param role: The role of this PermissionsBody.  # noqa: E501
        :type: int
        """

        self._role = role

    @property
    def read_field_blacklist(self):
        """Gets the read_field_blacklist of this PermissionsBody.  # noqa: E501

        Explicitly denies read access for specific fields.  # noqa: E501

        :return: The read_field_blacklist of this PermissionsBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._read_field_blacklist

    @read_field_blacklist.setter
    def read_field_blacklist(self, read_field_blacklist):
        """Sets the read_field_blacklist of this PermissionsBody.

        Explicitly denies read access for specific fields.  # noqa: E501

        :param read_field_blacklist: The read_field_blacklist of this PermissionsBody.  # noqa: E501
        :type: list[str]
        """

        self._read_field_blacklist = read_field_blacklist

    @property
    def status(self):
        """Gets the status of this PermissionsBody.  # noqa: E501

        What status this permission applies to.  # noqa: E501

        :return: The status of this PermissionsBody.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PermissionsBody.

        What status this permission applies to.  # noqa: E501

        :param status: The status of this PermissionsBody.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def status_blacklist(self):
        """Gets the status_blacklist of this PermissionsBody.  # noqa: E501

        Explicitly denies specific statuses to be used.  # noqa: E501

        :return: The status_blacklist of this PermissionsBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._status_blacklist

    @status_blacklist.setter
    def status_blacklist(self, status_blacklist):
        """Sets the status_blacklist of this PermissionsBody.

        Explicitly denies specific statuses to be used.  # noqa: E501

        :param status_blacklist: The status_blacklist of this PermissionsBody.  # noqa: E501
        :type: list[str]
        """

        self._status_blacklist = status_blacklist

    @property
    def update(self):
        """Gets the update of this PermissionsBody.  # noqa: E501

        If the user can update items.  # noqa: E501

        :return: The update of this PermissionsBody.  # noqa: E501
        :rtype: str
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this PermissionsBody.

        If the user can update items.  # noqa: E501

        :param update: The update of this PermissionsBody.  # noqa: E501
        :type: str
        """
        allowed_values = ["none", "mine", "role", "full"]  # noqa: E501
        if update not in allowed_values:
            raise ValueError(
                "Invalid value for `update` ({0}), must be one of {1}"  # noqa: E501
                .format(update, allowed_values)
            )

        self._update = update

    @property
    def write_field_blacklist(self):
        """Gets the write_field_blacklist of this PermissionsBody.  # noqa: E501

        Explicitly denies write access for specific fields.  # noqa: E501

        :return: The write_field_blacklist of this PermissionsBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._write_field_blacklist

    @write_field_blacklist.setter
    def write_field_blacklist(self, write_field_blacklist):
        """Sets the write_field_blacklist of this PermissionsBody.

        Explicitly denies write access for specific fields.  # noqa: E501

        :param write_field_blacklist: The write_field_blacklist of this PermissionsBody.  # noqa: E501
        :type: list[str]
        """

        self._write_field_blacklist = write_field_blacklist

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PermissionsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PermissionsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
