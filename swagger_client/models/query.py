# coding: utf-8

"""
    Dynamic API Specification

    This is a dynamically generated API specification for all endpoints existing on the current project.  # noqa: E501

    OpenAPI spec version: 10.10.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Query(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fields': 'list[str]',
        'filter': 'object',
        'search': 'str',
        'sort': 'list[str]',
        'limit': 'float',
        'offset': 'float',
        'page': 'float',
        'deep': 'object'
    }

    attribute_map = {
        'fields': 'fields',
        'filter': 'filter',
        'search': 'search',
        'sort': 'sort',
        'limit': 'limit',
        'offset': 'offset',
        'page': 'page',
        'deep': 'deep'
    }

    def __init__(self, fields=None, filter=None, search=None, sort=None, limit=None, offset=None, page=None, deep=None):  # noqa: E501
        """Query - a model defined in Swagger"""  # noqa: E501
        self._fields = None
        self._filter = None
        self._search = None
        self._sort = None
        self._limit = None
        self._offset = None
        self._page = None
        self._deep = None
        self.discriminator = None
        if fields is not None:
            self.fields = fields
        if filter is not None:
            self.filter = filter
        if search is not None:
            self.search = search
        if sort is not None:
            self.sort = sort
        if limit is not None:
            self.limit = limit
        if offset is not None:
            self.offset = offset
        if page is not None:
            self.page = page
        if deep is not None:
            self.deep = deep

    @property
    def fields(self):
        """Gets the fields of this Query.  # noqa: E501

        Control what fields are being returned in the object.  # noqa: E501

        :return: The fields of this Query.  # noqa: E501
        :rtype: list[str]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this Query.

        Control what fields are being returned in the object.  # noqa: E501

        :param fields: The fields of this Query.  # noqa: E501
        :type: list[str]
        """

        self._fields = fields

    @property
    def filter(self):
        """Gets the filter of this Query.  # noqa: E501


        :return: The filter of this Query.  # noqa: E501
        :rtype: object
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this Query.


        :param filter: The filter of this Query.  # noqa: E501
        :type: object
        """

        self._filter = filter

    @property
    def search(self):
        """Gets the search of this Query.  # noqa: E501

        Filter by items that contain the given search query in one of their fields.  # noqa: E501

        :return: The search of this Query.  # noqa: E501
        :rtype: str
        """
        return self._search

    @search.setter
    def search(self, search):
        """Sets the search of this Query.

        Filter by items that contain the given search query in one of their fields.  # noqa: E501

        :param search: The search of this Query.  # noqa: E501
        :type: str
        """

        self._search = search

    @property
    def sort(self):
        """Gets the sort of this Query.  # noqa: E501

        How to sort the returned items.  # noqa: E501

        :return: The sort of this Query.  # noqa: E501
        :rtype: list[str]
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this Query.

        How to sort the returned items.  # noqa: E501

        :param sort: The sort of this Query.  # noqa: E501
        :type: list[str]
        """

        self._sort = sort

    @property
    def limit(self):
        """Gets the limit of this Query.  # noqa: E501

        Set the maximum number of items that will be returned  # noqa: E501

        :return: The limit of this Query.  # noqa: E501
        :rtype: float
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this Query.

        Set the maximum number of items that will be returned  # noqa: E501

        :param limit: The limit of this Query.  # noqa: E501
        :type: float
        """

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this Query.  # noqa: E501

        How many items to skip when fetching data.  # noqa: E501

        :return: The offset of this Query.  # noqa: E501
        :rtype: float
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this Query.

        How many items to skip when fetching data.  # noqa: E501

        :param offset: The offset of this Query.  # noqa: E501
        :type: float
        """

        self._offset = offset

    @property
    def page(self):
        """Gets the page of this Query.  # noqa: E501

        Cursor for use in pagination. Often used in combination with limit.  # noqa: E501

        :return: The page of this Query.  # noqa: E501
        :rtype: float
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this Query.

        Cursor for use in pagination. Often used in combination with limit.  # noqa: E501

        :param page: The page of this Query.  # noqa: E501
        :type: float
        """

        self._page = page

    @property
    def deep(self):
        """Gets the deep of this Query.  # noqa: E501

        Deep allows you to set any of the other query parameters on a nested relational dataset.  # noqa: E501

        :return: The deep of this Query.  # noqa: E501
        :rtype: object
        """
        return self._deep

    @deep.setter
    def deep(self, deep):
        """Sets the deep of this Query.

        Deep allows you to set any of the other query parameters on a nested relational dataset.  # noqa: E501

        :param deep: The deep of this Query.  # noqa: E501
        :type: object
        """

        self._deep = deep

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Query, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Query):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
