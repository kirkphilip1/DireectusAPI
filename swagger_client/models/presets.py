# coding: utf-8

"""
    Dynamic API Specification

    This is a dynamically generated API specification for all endpoints existing on the current project.  # noqa: E501

    OpenAPI spec version: 10.10.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Presets(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'bookmark': 'str',
        'user': 'OneOfPresetsUser',
        'role': 'OneOfPresetsRole',
        'collection': 'OneOfPresetsCollection',
        'search': 'str',
        'layout': 'str',
        'layout_query': 'object',
        'layout_options': 'object',
        'refresh_interval': 'int',
        'filter': 'object',
        'icon': 'str',
        'color': 'str'
    }

    attribute_map = {
        'id': 'id',
        'bookmark': 'bookmark',
        'user': 'user',
        'role': 'role',
        'collection': 'collection',
        'search': 'search',
        'layout': 'layout',
        'layout_query': 'layout_query',
        'layout_options': 'layout_options',
        'refresh_interval': 'refresh_interval',
        'filter': 'filter',
        'icon': 'icon',
        'color': 'color'
    }

    def __init__(self, id=None, bookmark=None, user=None, role=None, collection=None, search=None, layout=None, layout_query=None, layout_options=None, refresh_interval=None, filter=None, icon=None, color=None):  # noqa: E501
        """Presets - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._bookmark = None
        self._user = None
        self._role = None
        self._collection = None
        self._search = None
        self._layout = None
        self._layout_query = None
        self._layout_options = None
        self._refresh_interval = None
        self._filter = None
        self._icon = None
        self._color = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if bookmark is not None:
            self.bookmark = bookmark
        if user is not None:
            self.user = user
        if role is not None:
            self.role = role
        if collection is not None:
            self.collection = collection
        if search is not None:
            self.search = search
        if layout is not None:
            self.layout = layout
        if layout_query is not None:
            self.layout_query = layout_query
        if layout_options is not None:
            self.layout_options = layout_options
        if refresh_interval is not None:
            self.refresh_interval = refresh_interval
        if filter is not None:
            self.filter = filter
        if icon is not None:
            self.icon = icon
        if color is not None:
            self.color = color

    @property
    def id(self):
        """Gets the id of this Presets.  # noqa: E501

        Unique identifier for this single collection preset.  # noqa: E501

        :return: The id of this Presets.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Presets.

        Unique identifier for this single collection preset.  # noqa: E501

        :param id: The id of this Presets.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def bookmark(self):
        """Gets the bookmark of this Presets.  # noqa: E501

        Name for the bookmark. If this is set, the preset will be considered a bookmark.  # noqa: E501

        :return: The bookmark of this Presets.  # noqa: E501
        :rtype: str
        """
        return self._bookmark

    @bookmark.setter
    def bookmark(self, bookmark):
        """Sets the bookmark of this Presets.

        Name for the bookmark. If this is set, the preset will be considered a bookmark.  # noqa: E501

        :param bookmark: The bookmark of this Presets.  # noqa: E501
        :type: str
        """

        self._bookmark = bookmark

    @property
    def user(self):
        """Gets the user of this Presets.  # noqa: E501

        The unique identifier of the user to whom this collection preset applies.  # noqa: E501

        :return: The user of this Presets.  # noqa: E501
        :rtype: OneOfPresetsUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Presets.

        The unique identifier of the user to whom this collection preset applies.  # noqa: E501

        :param user: The user of this Presets.  # noqa: E501
        :type: OneOfPresetsUser
        """

        self._user = user

    @property
    def role(self):
        """Gets the role of this Presets.  # noqa: E501

        The unique identifier of a role in the platform. If `user` is null, this will be used to apply the collection preset or bookmark for all users in the role.  # noqa: E501

        :return: The role of this Presets.  # noqa: E501
        :rtype: OneOfPresetsRole
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Presets.

        The unique identifier of a role in the platform. If `user` is null, this will be used to apply the collection preset or bookmark for all users in the role.  # noqa: E501

        :param role: The role of this Presets.  # noqa: E501
        :type: OneOfPresetsRole
        """

        self._role = role

    @property
    def collection(self):
        """Gets the collection of this Presets.  # noqa: E501

        What collection this collection preset is used for.  # noqa: E501

        :return: The collection of this Presets.  # noqa: E501
        :rtype: OneOfPresetsCollection
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this Presets.

        What collection this collection preset is used for.  # noqa: E501

        :param collection: The collection of this Presets.  # noqa: E501
        :type: OneOfPresetsCollection
        """

        self._collection = collection

    @property
    def search(self):
        """Gets the search of this Presets.  # noqa: E501

        Search query.  # noqa: E501

        :return: The search of this Presets.  # noqa: E501
        :rtype: str
        """
        return self._search

    @search.setter
    def search(self, search):
        """Sets the search of this Presets.

        Search query.  # noqa: E501

        :param search: The search of this Presets.  # noqa: E501
        :type: str
        """

        self._search = search

    @property
    def layout(self):
        """Gets the layout of this Presets.  # noqa: E501

        Key of the layout that is used.  # noqa: E501

        :return: The layout of this Presets.  # noqa: E501
        :rtype: str
        """
        return self._layout

    @layout.setter
    def layout(self, layout):
        """Sets the layout of this Presets.

        Key of the layout that is used.  # noqa: E501

        :param layout: The layout of this Presets.  # noqa: E501
        :type: str
        """

        self._layout = layout

    @property
    def layout_query(self):
        """Gets the layout_query of this Presets.  # noqa: E501

        Layout query that's saved per layout type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters.  # noqa: E501

        :return: The layout_query of this Presets.  # noqa: E501
        :rtype: object
        """
        return self._layout_query

    @layout_query.setter
    def layout_query(self, layout_query):
        """Sets the layout_query of this Presets.

        Layout query that's saved per layout type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters.  # noqa: E501

        :param layout_query: The layout_query of this Presets.  # noqa: E501
        :type: object
        """

        self._layout_query = layout_query

    @property
    def layout_options(self):
        """Gets the layout_options of this Presets.  # noqa: E501

        Options of the views. The properties in here are controlled by the layout.  # noqa: E501

        :return: The layout_options of this Presets.  # noqa: E501
        :rtype: object
        """
        return self._layout_options

    @layout_options.setter
    def layout_options(self, layout_options):
        """Sets the layout_options of this Presets.

        Options of the views. The properties in here are controlled by the layout.  # noqa: E501

        :param layout_options: The layout_options of this Presets.  # noqa: E501
        :type: object
        """

        self._layout_options = layout_options

    @property
    def refresh_interval(self):
        """Gets the refresh_interval of this Presets.  # noqa: E501


        :return: The refresh_interval of this Presets.  # noqa: E501
        :rtype: int
        """
        return self._refresh_interval

    @refresh_interval.setter
    def refresh_interval(self, refresh_interval):
        """Sets the refresh_interval of this Presets.


        :param refresh_interval: The refresh_interval of this Presets.  # noqa: E501
        :type: int
        """

        self._refresh_interval = refresh_interval

    @property
    def filter(self):
        """Gets the filter of this Presets.  # noqa: E501


        :return: The filter of this Presets.  # noqa: E501
        :rtype: object
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this Presets.


        :param filter: The filter of this Presets.  # noqa: E501
        :type: object
        """

        self._filter = filter

    @property
    def icon(self):
        """Gets the icon of this Presets.  # noqa: E501


        :return: The icon of this Presets.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this Presets.


        :param icon: The icon of this Presets.  # noqa: E501
        :type: str
        """

        self._icon = icon

    @property
    def color(self):
        """Gets the color of this Presets.  # noqa: E501


        :return: The color of this Presets.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Presets.


        :param color: The color of this Presets.  # noqa: E501
        :type: str
        """

        self._color = color

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Presets, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Presets):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
