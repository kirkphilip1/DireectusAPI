# coding: utf-8

"""
    Dynamic API Specification

    This is a dynamically generated API specification for all endpoints existing on the current project.  # noqa: E501

    OpenAPI spec version: 10.10.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FieldscollectionMeta(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'collection': 'str',
        'field': 'str',
        'special': 'list[str]',
        'system_interface': 'str',
        'options': 'object',
        'display': 'str',
        'display_options': 'object',
        'locked': 'bool',
        'readonly': 'bool',
        'hidden': 'bool',
        'sort': 'int',
        'width': 'str',
        'group': 'int',
        'translation': 'object',
        'note': 'str'
    }

    attribute_map = {
        'id': 'id',
        'collection': 'collection',
        'field': 'field',
        'special': 'special',
        'system_interface': 'system-interface',
        'options': 'options',
        'display': 'display',
        'display_options': 'display_options',
        'locked': 'locked',
        'readonly': 'readonly',
        'hidden': 'hidden',
        'sort': 'sort',
        'width': 'width',
        'group': 'group',
        'translation': 'translation',
        'note': 'note'
    }

    def __init__(self, id=None, collection=None, field=None, special=None, system_interface=None, options=None, display=None, display_options=None, locked=None, readonly=None, hidden=None, sort=None, width=None, group=None, translation=None, note=None):  # noqa: E501
        """FieldscollectionMeta - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._collection = None
        self._field = None
        self._special = None
        self._system_interface = None
        self._options = None
        self._display = None
        self._display_options = None
        self._locked = None
        self._readonly = None
        self._hidden = None
        self._sort = None
        self._width = None
        self._group = None
        self._translation = None
        self._note = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if collection is not None:
            self.collection = collection
        if field is not None:
            self.field = field
        if special is not None:
            self.special = special
        if system_interface is not None:
            self.system_interface = system_interface
        if options is not None:
            self.options = options
        if display is not None:
            self.display = display
        if display_options is not None:
            self.display_options = display_options
        if locked is not None:
            self.locked = locked
        if readonly is not None:
            self.readonly = readonly
        if hidden is not None:
            self.hidden = hidden
        if sort is not None:
            self.sort = sort
        if width is not None:
            self.width = width
        if group is not None:
            self.group = group
        if translation is not None:
            self.translation = translation
        if note is not None:
            self.note = note

    @property
    def id(self):
        """Gets the id of this FieldscollectionMeta.  # noqa: E501

        Unique identifier for the field in the `directus_fields` collection.  # noqa: E501

        :return: The id of this FieldscollectionMeta.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FieldscollectionMeta.

        Unique identifier for the field in the `directus_fields` collection.  # noqa: E501

        :param id: The id of this FieldscollectionMeta.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def collection(self):
        """Gets the collection of this FieldscollectionMeta.  # noqa: E501

        Unique name of the collection this field is in.  # noqa: E501

        :return: The collection of this FieldscollectionMeta.  # noqa: E501
        :rtype: str
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this FieldscollectionMeta.

        Unique name of the collection this field is in.  # noqa: E501

        :param collection: The collection of this FieldscollectionMeta.  # noqa: E501
        :type: str
        """

        self._collection = collection

    @property
    def field(self):
        """Gets the field of this FieldscollectionMeta.  # noqa: E501

        Unique name of the field. Field name is unique within the collection.  # noqa: E501

        :return: The field of this FieldscollectionMeta.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this FieldscollectionMeta.

        Unique name of the field. Field name is unique within the collection.  # noqa: E501

        :param field: The field of this FieldscollectionMeta.  # noqa: E501
        :type: str
        """

        self._field = field

    @property
    def special(self):
        """Gets the special of this FieldscollectionMeta.  # noqa: E501

        Transformation flag for field  # noqa: E501

        :return: The special of this FieldscollectionMeta.  # noqa: E501
        :rtype: list[str]
        """
        return self._special

    @special.setter
    def special(self, special):
        """Sets the special of this FieldscollectionMeta.

        Transformation flag for field  # noqa: E501

        :param special: The special of this FieldscollectionMeta.  # noqa: E501
        :type: list[str]
        """

        self._special = special

    @property
    def system_interface(self):
        """Gets the system_interface of this FieldscollectionMeta.  # noqa: E501

        What interface is used in the admin app to edit the value for this field.  # noqa: E501

        :return: The system_interface of this FieldscollectionMeta.  # noqa: E501
        :rtype: str
        """
        return self._system_interface

    @system_interface.setter
    def system_interface(self, system_interface):
        """Sets the system_interface of this FieldscollectionMeta.

        What interface is used in the admin app to edit the value for this field.  # noqa: E501

        :param system_interface: The system_interface of this FieldscollectionMeta.  # noqa: E501
        :type: str
        """

        self._system_interface = system_interface

    @property
    def options(self):
        """Gets the options of this FieldscollectionMeta.  # noqa: E501

        Options for the interface that's used. This format is based on the individual interface.  # noqa: E501

        :return: The options of this FieldscollectionMeta.  # noqa: E501
        :rtype: object
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this FieldscollectionMeta.

        Options for the interface that's used. This format is based on the individual interface.  # noqa: E501

        :param options: The options of this FieldscollectionMeta.  # noqa: E501
        :type: object
        """

        self._options = options

    @property
    def display(self):
        """Gets the display of this FieldscollectionMeta.  # noqa: E501

        What display is used in the admin app to display the value for this field.  # noqa: E501

        :return: The display of this FieldscollectionMeta.  # noqa: E501
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this FieldscollectionMeta.

        What display is used in the admin app to display the value for this field.  # noqa: E501

        :param display: The display of this FieldscollectionMeta.  # noqa: E501
        :type: str
        """

        self._display = display

    @property
    def display_options(self):
        """Gets the display_options of this FieldscollectionMeta.  # noqa: E501

        Options for the display that's used. This format is based on the individual display.  # noqa: E501

        :return: The display_options of this FieldscollectionMeta.  # noqa: E501
        :rtype: object
        """
        return self._display_options

    @display_options.setter
    def display_options(self, display_options):
        """Sets the display_options of this FieldscollectionMeta.

        Options for the display that's used. This format is based on the individual display.  # noqa: E501

        :param display_options: The display_options of this FieldscollectionMeta.  # noqa: E501
        :type: object
        """

        self._display_options = display_options

    @property
    def locked(self):
        """Gets the locked of this FieldscollectionMeta.  # noqa: E501

        If the field can be altered by the end user. Directus system fields have this value set to `true`.  # noqa: E501

        :return: The locked of this FieldscollectionMeta.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this FieldscollectionMeta.

        If the field can be altered by the end user. Directus system fields have this value set to `true`.  # noqa: E501

        :param locked: The locked of this FieldscollectionMeta.  # noqa: E501
        :type: bool
        """

        self._locked = locked

    @property
    def readonly(self):
        """Gets the readonly of this FieldscollectionMeta.  # noqa: E501

        Prevents the user from editing the value in the field.  # noqa: E501

        :return: The readonly of this FieldscollectionMeta.  # noqa: E501
        :rtype: bool
        """
        return self._readonly

    @readonly.setter
    def readonly(self, readonly):
        """Sets the readonly of this FieldscollectionMeta.

        Prevents the user from editing the value in the field.  # noqa: E501

        :param readonly: The readonly of this FieldscollectionMeta.  # noqa: E501
        :type: bool
        """

        self._readonly = readonly

    @property
    def hidden(self):
        """Gets the hidden of this FieldscollectionMeta.  # noqa: E501

        If this field should be hidden.  # noqa: E501

        :return: The hidden of this FieldscollectionMeta.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this FieldscollectionMeta.

        If this field should be hidden.  # noqa: E501

        :param hidden: The hidden of this FieldscollectionMeta.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    @property
    def sort(self):
        """Gets the sort of this FieldscollectionMeta.  # noqa: E501

        Sort order of this field on the edit page of the admin app.  # noqa: E501

        :return: The sort of this FieldscollectionMeta.  # noqa: E501
        :rtype: int
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this FieldscollectionMeta.

        Sort order of this field on the edit page of the admin app.  # noqa: E501

        :param sort: The sort of this FieldscollectionMeta.  # noqa: E501
        :type: int
        """

        self._sort = sort

    @property
    def width(self):
        """Gets the width of this FieldscollectionMeta.  # noqa: E501

        Width of the field on the edit form.  # noqa: E501

        :return: The width of this FieldscollectionMeta.  # noqa: E501
        :rtype: str
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this FieldscollectionMeta.

        Width of the field on the edit form.  # noqa: E501

        :param width: The width of this FieldscollectionMeta.  # noqa: E501
        :type: str
        """
        allowed_values = ["half", "half-left", "half-right", "full", "fill", ""]  # noqa: E501
        if width not in allowed_values:
            raise ValueError(
                "Invalid value for `width` ({0}), must be one of {1}"  # noqa: E501
                .format(width, allowed_values)
            )

        self._width = width

    @property
    def group(self):
        """Gets the group of this FieldscollectionMeta.  # noqa: E501

        What field group this field is part of.  # noqa: E501

        :return: The group of this FieldscollectionMeta.  # noqa: E501
        :rtype: int
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this FieldscollectionMeta.

        What field group this field is part of.  # noqa: E501

        :param group: The group of this FieldscollectionMeta.  # noqa: E501
        :type: int
        """

        self._group = group

    @property
    def translation(self):
        """Gets the translation of this FieldscollectionMeta.  # noqa: E501

        Key value pair of `<language>: <translation>` that allows the user to change the displayed name of the field in the admin app.  # noqa: E501

        :return: The translation of this FieldscollectionMeta.  # noqa: E501
        :rtype: object
        """
        return self._translation

    @translation.setter
    def translation(self, translation):
        """Sets the translation of this FieldscollectionMeta.

        Key value pair of `<language>: <translation>` that allows the user to change the displayed name of the field in the admin app.  # noqa: E501

        :param translation: The translation of this FieldscollectionMeta.  # noqa: E501
        :type: object
        """

        self._translation = translation

    @property
    def note(self):
        """Gets the note of this FieldscollectionMeta.  # noqa: E501

        A user provided note for the field. Will be rendered alongside the interface on the edit page.  # noqa: E501

        :return: The note of this FieldscollectionMeta.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this FieldscollectionMeta.

        A user provided note for the field. Will be rendered alongside the interface on the edit page.  # noqa: E501

        :param note: The note of this FieldscollectionMeta.  # noqa: E501
        :type: str
        """

        self._note = note

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FieldscollectionMeta, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FieldscollectionMeta):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
