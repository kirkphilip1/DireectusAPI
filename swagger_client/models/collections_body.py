# coding: utf-8

"""
    Dynamic API Specification

    This is a dynamically generated API specification for all endpoints existing on the current project.  # noqa: E501

    OpenAPI spec version: 10.10.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CollectionsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'collection': 'str',
        'fields': 'list[object]',
        'icon': 'str',
        'note': 'str',
        'display_template': 'str',
        'hidden': 'bool',
        'singleton': 'bool',
        'translation': 'str',
        'versioning': 'bool',
        'archive_field': 'str',
        'archive_app_filter': 'str',
        'archive_value': 'str',
        'unarchive_value': 'str',
        'sort_field': 'str'
    }

    attribute_map = {
        'collection': 'collection',
        'fields': 'fields',
        'icon': 'icon',
        'note': 'note',
        'display_template': 'display_template',
        'hidden': 'hidden',
        'singleton': 'singleton',
        'translation': 'translation',
        'versioning': 'versioning',
        'archive_field': 'archive_field',
        'archive_app_filter': 'archive_app_filter',
        'archive_value': 'archive_value',
        'unarchive_value': 'unarchive_value',
        'sort_field': 'sort_field'
    }

    def __init__(self, collection=None, fields=None, icon=None, note=None, display_template=None, hidden=None, singleton=None, translation=None, versioning=None, archive_field=None, archive_app_filter=None, archive_value=None, unarchive_value=None, sort_field=None):  # noqa: E501
        """CollectionsBody - a model defined in Swagger"""  # noqa: E501
        self._collection = None
        self._fields = None
        self._icon = None
        self._note = None
        self._display_template = None
        self._hidden = None
        self._singleton = None
        self._translation = None
        self._versioning = None
        self._archive_field = None
        self._archive_app_filter = None
        self._archive_value = None
        self._unarchive_value = None
        self._sort_field = None
        self.discriminator = None
        self.collection = collection
        self.fields = fields
        if icon is not None:
            self.icon = icon
        if note is not None:
            self.note = note
        if display_template is not None:
            self.display_template = display_template
        if hidden is not None:
            self.hidden = hidden
        if singleton is not None:
            self.singleton = singleton
        if translation is not None:
            self.translation = translation
        if versioning is not None:
            self.versioning = versioning
        if archive_field is not None:
            self.archive_field = archive_field
        if archive_app_filter is not None:
            self.archive_app_filter = archive_app_filter
        if archive_value is not None:
            self.archive_value = archive_value
        if unarchive_value is not None:
            self.unarchive_value = unarchive_value
        if sort_field is not None:
            self.sort_field = sort_field

    @property
    def collection(self):
        """Gets the collection of this CollectionsBody.  # noqa: E501

        Unique name of the collection.  # noqa: E501

        :return: The collection of this CollectionsBody.  # noqa: E501
        :rtype: str
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this CollectionsBody.

        Unique name of the collection.  # noqa: E501

        :param collection: The collection of this CollectionsBody.  # noqa: E501
        :type: str
        """
        if collection is None:
            raise ValueError("Invalid value for `collection`, must not be `None`")  # noqa: E501

        self._collection = collection

    @property
    def fields(self):
        """Gets the fields of this CollectionsBody.  # noqa: E501

        The fields contained in this collection. See the fields reference for more information. Each individual field requires field, type, and interface to be provided.  # noqa: E501

        :return: The fields of this CollectionsBody.  # noqa: E501
        :rtype: list[object]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this CollectionsBody.

        The fields contained in this collection. See the fields reference for more information. Each individual field requires field, type, and interface to be provided.  # noqa: E501

        :param fields: The fields of this CollectionsBody.  # noqa: E501
        :type: list[object]
        """
        if fields is None:
            raise ValueError("Invalid value for `fields`, must not be `None`")  # noqa: E501

        self._fields = fields

    @property
    def icon(self):
        """Gets the icon of this CollectionsBody.  # noqa: E501

        Name of a Google Material Design Icon that's assigned to this collection.  # noqa: E501

        :return: The icon of this CollectionsBody.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this CollectionsBody.

        Name of a Google Material Design Icon that's assigned to this collection.  # noqa: E501

        :param icon: The icon of this CollectionsBody.  # noqa: E501
        :type: str
        """

        self._icon = icon

    @property
    def note(self):
        """Gets the note of this CollectionsBody.  # noqa: E501

        A note describing the collection.  # noqa: E501

        :return: The note of this CollectionsBody.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this CollectionsBody.

        A note describing the collection.  # noqa: E501

        :param note: The note of this CollectionsBody.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def display_template(self):
        """Gets the display_template of this CollectionsBody.  # noqa: E501

        Text representation of how items from this collection are shown across the system.  # noqa: E501

        :return: The display_template of this CollectionsBody.  # noqa: E501
        :rtype: str
        """
        return self._display_template

    @display_template.setter
    def display_template(self, display_template):
        """Sets the display_template of this CollectionsBody.

        Text representation of how items from this collection are shown across the system.  # noqa: E501

        :param display_template: The display_template of this CollectionsBody.  # noqa: E501
        :type: str
        """

        self._display_template = display_template

    @property
    def hidden(self):
        """Gets the hidden of this CollectionsBody.  # noqa: E501

        Whether or not the collection is hidden from the navigation in the admin app.  # noqa: E501

        :return: The hidden of this CollectionsBody.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this CollectionsBody.

        Whether or not the collection is hidden from the navigation in the admin app.  # noqa: E501

        :param hidden: The hidden of this CollectionsBody.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    @property
    def singleton(self):
        """Gets the singleton of this CollectionsBody.  # noqa: E501

        Whether or not the collection is treated as a single object.  # noqa: E501

        :return: The singleton of this CollectionsBody.  # noqa: E501
        :rtype: bool
        """
        return self._singleton

    @singleton.setter
    def singleton(self, singleton):
        """Sets the singleton of this CollectionsBody.

        Whether or not the collection is treated as a single object.  # noqa: E501

        :param singleton: The singleton of this CollectionsBody.  # noqa: E501
        :type: bool
        """

        self._singleton = singleton

    @property
    def translation(self):
        """Gets the translation of this CollectionsBody.  # noqa: E501

        Key value pairs of how to show this collection's name in different languages in the admin app.  # noqa: E501

        :return: The translation of this CollectionsBody.  # noqa: E501
        :rtype: str
        """
        return self._translation

    @translation.setter
    def translation(self, translation):
        """Sets the translation of this CollectionsBody.

        Key value pairs of how to show this collection's name in different languages in the admin app.  # noqa: E501

        :param translation: The translation of this CollectionsBody.  # noqa: E501
        :type: str
        """

        self._translation = translation

    @property
    def versioning(self):
        """Gets the versioning of this CollectionsBody.  # noqa: E501

        Whether or not Content Versioning is enabled for this collection.  # noqa: E501

        :return: The versioning of this CollectionsBody.  # noqa: E501
        :rtype: bool
        """
        return self._versioning

    @versioning.setter
    def versioning(self, versioning):
        """Sets the versioning of this CollectionsBody.

        Whether or not Content Versioning is enabled for this collection.  # noqa: E501

        :param versioning: The versioning of this CollectionsBody.  # noqa: E501
        :type: bool
        """

        self._versioning = versioning

    @property
    def archive_field(self):
        """Gets the archive_field of this CollectionsBody.  # noqa: E501

        What field holds the archive value.  # noqa: E501

        :return: The archive_field of this CollectionsBody.  # noqa: E501
        :rtype: str
        """
        return self._archive_field

    @archive_field.setter
    def archive_field(self, archive_field):
        """Sets the archive_field of this CollectionsBody.

        What field holds the archive value.  # noqa: E501

        :param archive_field: The archive_field of this CollectionsBody.  # noqa: E501
        :type: str
        """

        self._archive_field = archive_field

    @property
    def archive_app_filter(self):
        """Gets the archive_app_filter of this CollectionsBody.  # noqa: E501

        What value to use for \"archived\" items.  # noqa: E501

        :return: The archive_app_filter of this CollectionsBody.  # noqa: E501
        :rtype: str
        """
        return self._archive_app_filter

    @archive_app_filter.setter
    def archive_app_filter(self, archive_app_filter):
        """Sets the archive_app_filter of this CollectionsBody.

        What value to use for \"archived\" items.  # noqa: E501

        :param archive_app_filter: The archive_app_filter of this CollectionsBody.  # noqa: E501
        :type: str
        """

        self._archive_app_filter = archive_app_filter

    @property
    def archive_value(self):
        """Gets the archive_value of this CollectionsBody.  # noqa: E501

        What value to use to \"unarchive\" items.  # noqa: E501

        :return: The archive_value of this CollectionsBody.  # noqa: E501
        :rtype: str
        """
        return self._archive_value

    @archive_value.setter
    def archive_value(self, archive_value):
        """Sets the archive_value of this CollectionsBody.

        What value to use to \"unarchive\" items.  # noqa: E501

        :param archive_value: The archive_value of this CollectionsBody.  # noqa: E501
        :type: str
        """

        self._archive_value = archive_value

    @property
    def unarchive_value(self):
        """Gets the unarchive_value of this CollectionsBody.  # noqa: E501

        Whether or not to show the \"archived\" filter.  # noqa: E501

        :return: The unarchive_value of this CollectionsBody.  # noqa: E501
        :rtype: str
        """
        return self._unarchive_value

    @unarchive_value.setter
    def unarchive_value(self, unarchive_value):
        """Sets the unarchive_value of this CollectionsBody.

        Whether or not to show the \"archived\" filter.  # noqa: E501

        :param unarchive_value: The unarchive_value of this CollectionsBody.  # noqa: E501
        :type: str
        """

        self._unarchive_value = unarchive_value

    @property
    def sort_field(self):
        """Gets the sort_field of this CollectionsBody.  # noqa: E501

        The sort field in the collection.  # noqa: E501

        :return: The sort_field of this CollectionsBody.  # noqa: E501
        :rtype: str
        """
        return self._sort_field

    @sort_field.setter
    def sort_field(self, sort_field):
        """Sets the sort_field of this CollectionsBody.

        The sort field in the collection.  # noqa: E501

        :param sort_field: The sort_field of this CollectionsBody.  # noqa: E501
        :type: str
        """

        self._sort_field = sort_field

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CollectionsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CollectionsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
