# coding: utf-8

"""
    Dynamic API Specification

    This is a dynamically generated API specification for all endpoints existing on the current project.  # noqa: E501

    OpenAPI spec version: 10.10.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Settings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'project_name': 'str',
        'project_url': 'str',
        'project_color': 'str',
        'project_logo': 'str',
        'public_foreground': 'str',
        'public_background': 'SettingsPublicBackground',
        'public_note': 'str',
        'auth_login_attempts': 'int',
        'auth_password_policy': 'str',
        'storage_asset_transform': 'str',
        'storage_asset_presets': 'list[SettingsStorageAssetPresets]',
        'custom_css': 'str',
        'storage_default_folder': 'str',
        'basemaps': 'object',
        'mapbox_key': 'str',
        'module_bar': 'object',
        'project_descriptor': 'str',
        'default_language': 'str',
        'custom_aspect_ratios': 'object',
        'public_favicon': 'OneOfSettingsPublicFavicon',
        'default_appearance': 'str',
        'default_theme_light': 'str',
        'theme_light_overrides': 'object',
        'default_theme_dark': 'str',
        'theme_dark_overrides': 'object',
        'report_error_url': 'str',
        'report_bug_url': 'str',
        'report_feature_url': 'str'
    }

    attribute_map = {
        'id': 'id',
        'project_name': 'project_name',
        'project_url': 'project_url',
        'project_color': 'project_color',
        'project_logo': 'project_logo',
        'public_foreground': 'public_foreground',
        'public_background': 'public_background',
        'public_note': 'public_note',
        'auth_login_attempts': 'auth_login_attempts',
        'auth_password_policy': 'auth_password_policy',
        'storage_asset_transform': 'storage_asset_transform',
        'storage_asset_presets': 'storage_asset_presets',
        'custom_css': 'custom_css',
        'storage_default_folder': 'storage_default_folder',
        'basemaps': 'basemaps',
        'mapbox_key': 'mapbox_key',
        'module_bar': 'module_bar',
        'project_descriptor': 'project_descriptor',
        'default_language': 'default_language',
        'custom_aspect_ratios': 'custom_aspect_ratios',
        'public_favicon': 'public_favicon',
        'default_appearance': 'default_appearance',
        'default_theme_light': 'default_theme_light',
        'theme_light_overrides': 'theme_light_overrides',
        'default_theme_dark': 'default_theme_dark',
        'theme_dark_overrides': 'theme_dark_overrides',
        'report_error_url': 'report_error_url',
        'report_bug_url': 'report_bug_url',
        'report_feature_url': 'report_feature_url'
    }

    def __init__(self, id=None, project_name=None, project_url=None, project_color=None, project_logo=None, public_foreground=None, public_background=None, public_note=None, auth_login_attempts=None, auth_password_policy=None, storage_asset_transform=None, storage_asset_presets=None, custom_css=None, storage_default_folder=None, basemaps=None, mapbox_key=None, module_bar=None, project_descriptor=None, default_language=None, custom_aspect_ratios=None, public_favicon=None, default_appearance=None, default_theme_light=None, theme_light_overrides=None, default_theme_dark=None, theme_dark_overrides=None, report_error_url=None, report_bug_url=None, report_feature_url=None):  # noqa: E501
        """Settings - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._project_name = None
        self._project_url = None
        self._project_color = None
        self._project_logo = None
        self._public_foreground = None
        self._public_background = None
        self._public_note = None
        self._auth_login_attempts = None
        self._auth_password_policy = None
        self._storage_asset_transform = None
        self._storage_asset_presets = None
        self._custom_css = None
        self._storage_default_folder = None
        self._basemaps = None
        self._mapbox_key = None
        self._module_bar = None
        self._project_descriptor = None
        self._default_language = None
        self._custom_aspect_ratios = None
        self._public_favicon = None
        self._default_appearance = None
        self._default_theme_light = None
        self._theme_light_overrides = None
        self._default_theme_dark = None
        self._theme_dark_overrides = None
        self._report_error_url = None
        self._report_bug_url = None
        self._report_feature_url = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if project_name is not None:
            self.project_name = project_name
        if project_url is not None:
            self.project_url = project_url
        if project_color is not None:
            self.project_color = project_color
        if project_logo is not None:
            self.project_logo = project_logo
        if public_foreground is not None:
            self.public_foreground = public_foreground
        if public_background is not None:
            self.public_background = public_background
        if public_note is not None:
            self.public_note = public_note
        if auth_login_attempts is not None:
            self.auth_login_attempts = auth_login_attempts
        if auth_password_policy is not None:
            self.auth_password_policy = auth_password_policy
        if storage_asset_transform is not None:
            self.storage_asset_transform = storage_asset_transform
        if storage_asset_presets is not None:
            self.storage_asset_presets = storage_asset_presets
        if custom_css is not None:
            self.custom_css = custom_css
        if storage_default_folder is not None:
            self.storage_default_folder = storage_default_folder
        if basemaps is not None:
            self.basemaps = basemaps
        if mapbox_key is not None:
            self.mapbox_key = mapbox_key
        if module_bar is not None:
            self.module_bar = module_bar
        if project_descriptor is not None:
            self.project_descriptor = project_descriptor
        if default_language is not None:
            self.default_language = default_language
        if custom_aspect_ratios is not None:
            self.custom_aspect_ratios = custom_aspect_ratios
        if public_favicon is not None:
            self.public_favicon = public_favicon
        if default_appearance is not None:
            self.default_appearance = default_appearance
        if default_theme_light is not None:
            self.default_theme_light = default_theme_light
        if theme_light_overrides is not None:
            self.theme_light_overrides = theme_light_overrides
        if default_theme_dark is not None:
            self.default_theme_dark = default_theme_dark
        if theme_dark_overrides is not None:
            self.theme_dark_overrides = theme_dark_overrides
        if report_error_url is not None:
            self.report_error_url = report_error_url
        if report_bug_url is not None:
            self.report_bug_url = report_bug_url
        if report_feature_url is not None:
            self.report_feature_url = report_feature_url

    @property
    def id(self):
        """Gets the id of this Settings.  # noqa: E501

        Unique identifier for the setting.  # noqa: E501

        :return: The id of this Settings.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Settings.

        Unique identifier for the setting.  # noqa: E501

        :param id: The id of this Settings.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def project_name(self):
        """Gets the project_name of this Settings.  # noqa: E501

        The name of the project.  # noqa: E501

        :return: The project_name of this Settings.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this Settings.

        The name of the project.  # noqa: E501

        :param project_name: The project_name of this Settings.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def project_url(self):
        """Gets the project_url of this Settings.  # noqa: E501

        The url of the project.  # noqa: E501

        :return: The project_url of this Settings.  # noqa: E501
        :rtype: str
        """
        return self._project_url

    @project_url.setter
    def project_url(self, project_url):
        """Sets the project_url of this Settings.

        The url of the project.  # noqa: E501

        :param project_url: The project_url of this Settings.  # noqa: E501
        :type: str
        """

        self._project_url = project_url

    @property
    def project_color(self):
        """Gets the project_color of this Settings.  # noqa: E501

        The brand color of the project.  # noqa: E501

        :return: The project_color of this Settings.  # noqa: E501
        :rtype: str
        """
        return self._project_color

    @project_color.setter
    def project_color(self, project_color):
        """Sets the project_color of this Settings.

        The brand color of the project.  # noqa: E501

        :param project_color: The project_color of this Settings.  # noqa: E501
        :type: str
        """

        self._project_color = project_color

    @property
    def project_logo(self):
        """Gets the project_logo of this Settings.  # noqa: E501

        The logo of the project.  # noqa: E501

        :return: The project_logo of this Settings.  # noqa: E501
        :rtype: str
        """
        return self._project_logo

    @project_logo.setter
    def project_logo(self, project_logo):
        """Sets the project_logo of this Settings.

        The logo of the project.  # noqa: E501

        :param project_logo: The project_logo of this Settings.  # noqa: E501
        :type: str
        """

        self._project_logo = project_logo

    @property
    def public_foreground(self):
        """Gets the public_foreground of this Settings.  # noqa: E501

        The foreground of the project.  # noqa: E501

        :return: The public_foreground of this Settings.  # noqa: E501
        :rtype: str
        """
        return self._public_foreground

    @public_foreground.setter
    def public_foreground(self, public_foreground):
        """Sets the public_foreground of this Settings.

        The foreground of the project.  # noqa: E501

        :param public_foreground: The public_foreground of this Settings.  # noqa: E501
        :type: str
        """

        self._public_foreground = public_foreground

    @property
    def public_background(self):
        """Gets the public_background of this Settings.  # noqa: E501


        :return: The public_background of this Settings.  # noqa: E501
        :rtype: SettingsPublicBackground
        """
        return self._public_background

    @public_background.setter
    def public_background(self, public_background):
        """Sets the public_background of this Settings.


        :param public_background: The public_background of this Settings.  # noqa: E501
        :type: SettingsPublicBackground
        """

        self._public_background = public_background

    @property
    def public_note(self):
        """Gets the public_note of this Settings.  # noqa: E501

        Note rendered on the public pages of the app.  # noqa: E501

        :return: The public_note of this Settings.  # noqa: E501
        :rtype: str
        """
        return self._public_note

    @public_note.setter
    def public_note(self, public_note):
        """Sets the public_note of this Settings.

        Note rendered on the public pages of the app.  # noqa: E501

        :param public_note: The public_note of this Settings.  # noqa: E501
        :type: str
        """

        self._public_note = public_note

    @property
    def auth_login_attempts(self):
        """Gets the auth_login_attempts of this Settings.  # noqa: E501

        Allowed authentication login attempts before the user's status is set to blocked.  # noqa: E501

        :return: The auth_login_attempts of this Settings.  # noqa: E501
        :rtype: int
        """
        return self._auth_login_attempts

    @auth_login_attempts.setter
    def auth_login_attempts(self, auth_login_attempts):
        """Sets the auth_login_attempts of this Settings.

        Allowed authentication login attempts before the user's status is set to blocked.  # noqa: E501

        :param auth_login_attempts: The auth_login_attempts of this Settings.  # noqa: E501
        :type: int
        """

        self._auth_login_attempts = auth_login_attempts

    @property
    def auth_password_policy(self):
        """Gets the auth_password_policy of this Settings.  # noqa: E501

        Authentication password policy.  # noqa: E501

        :return: The auth_password_policy of this Settings.  # noqa: E501
        :rtype: str
        """
        return self._auth_password_policy

    @auth_password_policy.setter
    def auth_password_policy(self, auth_password_policy):
        """Sets the auth_password_policy of this Settings.

        Authentication password policy.  # noqa: E501

        :param auth_password_policy: The auth_password_policy of this Settings.  # noqa: E501
        :type: str
        """

        self._auth_password_policy = auth_password_policy

    @property
    def storage_asset_transform(self):
        """Gets the storage_asset_transform of this Settings.  # noqa: E501

        What transformations are allowed in the assets endpoint.  # noqa: E501

        :return: The storage_asset_transform of this Settings.  # noqa: E501
        :rtype: str
        """
        return self._storage_asset_transform

    @storage_asset_transform.setter
    def storage_asset_transform(self, storage_asset_transform):
        """Sets the storage_asset_transform of this Settings.

        What transformations are allowed in the assets endpoint.  # noqa: E501

        :param storage_asset_transform: The storage_asset_transform of this Settings.  # noqa: E501
        :type: str
        """
        allowed_values = ["all", "none", "presets"]  # noqa: E501
        if storage_asset_transform not in allowed_values:
            raise ValueError(
                "Invalid value for `storage_asset_transform` ({0}), must be one of {1}"  # noqa: E501
                .format(storage_asset_transform, allowed_values)
            )

        self._storage_asset_transform = storage_asset_transform

    @property
    def storage_asset_presets(self):
        """Gets the storage_asset_presets of this Settings.  # noqa: E501

        Array of allowed  # noqa: E501

        :return: The storage_asset_presets of this Settings.  # noqa: E501
        :rtype: list[SettingsStorageAssetPresets]
        """
        return self._storage_asset_presets

    @storage_asset_presets.setter
    def storage_asset_presets(self, storage_asset_presets):
        """Sets the storage_asset_presets of this Settings.

        Array of allowed  # noqa: E501

        :param storage_asset_presets: The storage_asset_presets of this Settings.  # noqa: E501
        :type: list[SettingsStorageAssetPresets]
        """

        self._storage_asset_presets = storage_asset_presets

    @property
    def custom_css(self):
        """Gets the custom_css of this Settings.  # noqa: E501


        :return: The custom_css of this Settings.  # noqa: E501
        :rtype: str
        """
        return self._custom_css

    @custom_css.setter
    def custom_css(self, custom_css):
        """Sets the custom_css of this Settings.


        :param custom_css: The custom_css of this Settings.  # noqa: E501
        :type: str
        """

        self._custom_css = custom_css

    @property
    def storage_default_folder(self):
        """Gets the storage_default_folder of this Settings.  # noqa: E501

        Default folder to place files  # noqa: E501

        :return: The storage_default_folder of this Settings.  # noqa: E501
        :rtype: str
        """
        return self._storage_default_folder

    @storage_default_folder.setter
    def storage_default_folder(self, storage_default_folder):
        """Sets the storage_default_folder of this Settings.

        Default folder to place files  # noqa: E501

        :param storage_default_folder: The storage_default_folder of this Settings.  # noqa: E501
        :type: str
        """

        self._storage_default_folder = storage_default_folder

    @property
    def basemaps(self):
        """Gets the basemaps of this Settings.  # noqa: E501


        :return: The basemaps of this Settings.  # noqa: E501
        :rtype: object
        """
        return self._basemaps

    @basemaps.setter
    def basemaps(self, basemaps):
        """Sets the basemaps of this Settings.


        :param basemaps: The basemaps of this Settings.  # noqa: E501
        :type: object
        """

        self._basemaps = basemaps

    @property
    def mapbox_key(self):
        """Gets the mapbox_key of this Settings.  # noqa: E501


        :return: The mapbox_key of this Settings.  # noqa: E501
        :rtype: str
        """
        return self._mapbox_key

    @mapbox_key.setter
    def mapbox_key(self, mapbox_key):
        """Sets the mapbox_key of this Settings.


        :param mapbox_key: The mapbox_key of this Settings.  # noqa: E501
        :type: str
        """

        self._mapbox_key = mapbox_key

    @property
    def module_bar(self):
        """Gets the module_bar of this Settings.  # noqa: E501


        :return: The module_bar of this Settings.  # noqa: E501
        :rtype: object
        """
        return self._module_bar

    @module_bar.setter
    def module_bar(self, module_bar):
        """Sets the module_bar of this Settings.


        :param module_bar: The module_bar of this Settings.  # noqa: E501
        :type: object
        """

        self._module_bar = module_bar

    @property
    def project_descriptor(self):
        """Gets the project_descriptor of this Settings.  # noqa: E501


        :return: The project_descriptor of this Settings.  # noqa: E501
        :rtype: str
        """
        return self._project_descriptor

    @project_descriptor.setter
    def project_descriptor(self, project_descriptor):
        """Sets the project_descriptor of this Settings.


        :param project_descriptor: The project_descriptor of this Settings.  # noqa: E501
        :type: str
        """

        self._project_descriptor = project_descriptor

    @property
    def default_language(self):
        """Gets the default_language of this Settings.  # noqa: E501


        :return: The default_language of this Settings.  # noqa: E501
        :rtype: str
        """
        return self._default_language

    @default_language.setter
    def default_language(self, default_language):
        """Sets the default_language of this Settings.


        :param default_language: The default_language of this Settings.  # noqa: E501
        :type: str
        """

        self._default_language = default_language

    @property
    def custom_aspect_ratios(self):
        """Gets the custom_aspect_ratios of this Settings.  # noqa: E501


        :return: The custom_aspect_ratios of this Settings.  # noqa: E501
        :rtype: object
        """
        return self._custom_aspect_ratios

    @custom_aspect_ratios.setter
    def custom_aspect_ratios(self, custom_aspect_ratios):
        """Sets the custom_aspect_ratios of this Settings.


        :param custom_aspect_ratios: The custom_aspect_ratios of this Settings.  # noqa: E501
        :type: object
        """

        self._custom_aspect_ratios = custom_aspect_ratios

    @property
    def public_favicon(self):
        """Gets the public_favicon of this Settings.  # noqa: E501

        $t:field_options.directus_settings.project_favicon_note  # noqa: E501

        :return: The public_favicon of this Settings.  # noqa: E501
        :rtype: OneOfSettingsPublicFavicon
        """
        return self._public_favicon

    @public_favicon.setter
    def public_favicon(self, public_favicon):
        """Sets the public_favicon of this Settings.

        $t:field_options.directus_settings.project_favicon_note  # noqa: E501

        :param public_favicon: The public_favicon of this Settings.  # noqa: E501
        :type: OneOfSettingsPublicFavicon
        """

        self._public_favicon = public_favicon

    @property
    def default_appearance(self):
        """Gets the default_appearance of this Settings.  # noqa: E501


        :return: The default_appearance of this Settings.  # noqa: E501
        :rtype: str
        """
        return self._default_appearance

    @default_appearance.setter
    def default_appearance(self, default_appearance):
        """Sets the default_appearance of this Settings.


        :param default_appearance: The default_appearance of this Settings.  # noqa: E501
        :type: str
        """

        self._default_appearance = default_appearance

    @property
    def default_theme_light(self):
        """Gets the default_theme_light of this Settings.  # noqa: E501


        :return: The default_theme_light of this Settings.  # noqa: E501
        :rtype: str
        """
        return self._default_theme_light

    @default_theme_light.setter
    def default_theme_light(self, default_theme_light):
        """Sets the default_theme_light of this Settings.


        :param default_theme_light: The default_theme_light of this Settings.  # noqa: E501
        :type: str
        """

        self._default_theme_light = default_theme_light

    @property
    def theme_light_overrides(self):
        """Gets the theme_light_overrides of this Settings.  # noqa: E501


        :return: The theme_light_overrides of this Settings.  # noqa: E501
        :rtype: object
        """
        return self._theme_light_overrides

    @theme_light_overrides.setter
    def theme_light_overrides(self, theme_light_overrides):
        """Sets the theme_light_overrides of this Settings.


        :param theme_light_overrides: The theme_light_overrides of this Settings.  # noqa: E501
        :type: object
        """

        self._theme_light_overrides = theme_light_overrides

    @property
    def default_theme_dark(self):
        """Gets the default_theme_dark of this Settings.  # noqa: E501


        :return: The default_theme_dark of this Settings.  # noqa: E501
        :rtype: str
        """
        return self._default_theme_dark

    @default_theme_dark.setter
    def default_theme_dark(self, default_theme_dark):
        """Sets the default_theme_dark of this Settings.


        :param default_theme_dark: The default_theme_dark of this Settings.  # noqa: E501
        :type: str
        """

        self._default_theme_dark = default_theme_dark

    @property
    def theme_dark_overrides(self):
        """Gets the theme_dark_overrides of this Settings.  # noqa: E501


        :return: The theme_dark_overrides of this Settings.  # noqa: E501
        :rtype: object
        """
        return self._theme_dark_overrides

    @theme_dark_overrides.setter
    def theme_dark_overrides(self, theme_dark_overrides):
        """Sets the theme_dark_overrides of this Settings.


        :param theme_dark_overrides: The theme_dark_overrides of this Settings.  # noqa: E501
        :type: object
        """

        self._theme_dark_overrides = theme_dark_overrides

    @property
    def report_error_url(self):
        """Gets the report_error_url of this Settings.  # noqa: E501


        :return: The report_error_url of this Settings.  # noqa: E501
        :rtype: str
        """
        return self._report_error_url

    @report_error_url.setter
    def report_error_url(self, report_error_url):
        """Sets the report_error_url of this Settings.


        :param report_error_url: The report_error_url of this Settings.  # noqa: E501
        :type: str
        """

        self._report_error_url = report_error_url

    @property
    def report_bug_url(self):
        """Gets the report_bug_url of this Settings.  # noqa: E501


        :return: The report_bug_url of this Settings.  # noqa: E501
        :rtype: str
        """
        return self._report_bug_url

    @report_bug_url.setter
    def report_bug_url(self, report_bug_url):
        """Sets the report_bug_url of this Settings.


        :param report_bug_url: The report_bug_url of this Settings.  # noqa: E501
        :type: str
        """

        self._report_bug_url = report_bug_url

    @property
    def report_feature_url(self):
        """Gets the report_feature_url of this Settings.  # noqa: E501


        :return: The report_feature_url of this Settings.  # noqa: E501
        :rtype: str
        """
        return self._report_feature_url

    @report_feature_url.setter
    def report_feature_url(self, report_feature_url):
        """Sets the report_feature_url of this Settings.


        :param report_feature_url: The report_feature_url of this Settings.  # noqa: E501
        :type: str
        """

        self._report_feature_url = report_feature_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Settings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Settings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
