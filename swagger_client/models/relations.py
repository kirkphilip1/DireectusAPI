# coding: utf-8

"""
    Dynamic API Specification

    This is a dynamically generated API specification for all endpoints existing on the current project.  # noqa: E501

    OpenAPI spec version: 10.10.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Relations(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'many_collection': 'str',
        'many_field': 'str',
        'one_collection': 'str',
        'one_field': 'str',
        'one_collection_field': 'str',
        'one_allowed_collections': 'list[str]',
        'junction_field': 'str',
        'sort_field': 'str',
        'one_deselect_action': 'str'
    }

    attribute_map = {
        'id': 'id',
        'many_collection': 'many_collection',
        'many_field': 'many_field',
        'one_collection': 'one_collection',
        'one_field': 'one_field',
        'one_collection_field': 'one_collection_field',
        'one_allowed_collections': 'one_allowed_collections',
        'junction_field': 'junction_field',
        'sort_field': 'sort_field',
        'one_deselect_action': 'one_deselect_action'
    }

    def __init__(self, id=None, many_collection=None, many_field=None, one_collection=None, one_field=None, one_collection_field=None, one_allowed_collections=None, junction_field=None, sort_field=None, one_deselect_action=None):  # noqa: E501
        """Relations - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._many_collection = None
        self._many_field = None
        self._one_collection = None
        self._one_field = None
        self._one_collection_field = None
        self._one_allowed_collections = None
        self._junction_field = None
        self._sort_field = None
        self._one_deselect_action = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if many_collection is not None:
            self.many_collection = many_collection
        if many_field is not None:
            self.many_field = many_field
        if one_collection is not None:
            self.one_collection = one_collection
        if one_field is not None:
            self.one_field = one_field
        if one_collection_field is not None:
            self.one_collection_field = one_collection_field
        if one_allowed_collections is not None:
            self.one_allowed_collections = one_allowed_collections
        if junction_field is not None:
            self.junction_field = junction_field
        if sort_field is not None:
            self.sort_field = sort_field
        if one_deselect_action is not None:
            self.one_deselect_action = one_deselect_action

    @property
    def id(self):
        """Gets the id of this Relations.  # noqa: E501

        Unique identifier for the relation.  # noqa: E501

        :return: The id of this Relations.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Relations.

        Unique identifier for the relation.  # noqa: E501

        :param id: The id of this Relations.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def many_collection(self):
        """Gets the many_collection of this Relations.  # noqa: E501

        Collection that has the field that holds the foreign key.  # noqa: E501

        :return: The many_collection of this Relations.  # noqa: E501
        :rtype: str
        """
        return self._many_collection

    @many_collection.setter
    def many_collection(self, many_collection):
        """Sets the many_collection of this Relations.

        Collection that has the field that holds the foreign key.  # noqa: E501

        :param many_collection: The many_collection of this Relations.  # noqa: E501
        :type: str
        """

        self._many_collection = many_collection

    @property
    def many_field(self):
        """Gets the many_field of this Relations.  # noqa: E501

        Foreign key. Field that holds the primary key of the related collection.  # noqa: E501

        :return: The many_field of this Relations.  # noqa: E501
        :rtype: str
        """
        return self._many_field

    @many_field.setter
    def many_field(self, many_field):
        """Sets the many_field of this Relations.

        Foreign key. Field that holds the primary key of the related collection.  # noqa: E501

        :param many_field: The many_field of this Relations.  # noqa: E501
        :type: str
        """

        self._many_field = many_field

    @property
    def one_collection(self):
        """Gets the one_collection of this Relations.  # noqa: E501

        Collection on the _one_ side of the relationship.  # noqa: E501

        :return: The one_collection of this Relations.  # noqa: E501
        :rtype: str
        """
        return self._one_collection

    @one_collection.setter
    def one_collection(self, one_collection):
        """Sets the one_collection of this Relations.

        Collection on the _one_ side of the relationship.  # noqa: E501

        :param one_collection: The one_collection of this Relations.  # noqa: E501
        :type: str
        """

        self._one_collection = one_collection

    @property
    def one_field(self):
        """Gets the one_field of this Relations.  # noqa: E501

        Alias column that serves as the _one_ side of the relationship.  # noqa: E501

        :return: The one_field of this Relations.  # noqa: E501
        :rtype: str
        """
        return self._one_field

    @one_field.setter
    def one_field(self, one_field):
        """Sets the one_field of this Relations.

        Alias column that serves as the _one_ side of the relationship.  # noqa: E501

        :param one_field: The one_field of this Relations.  # noqa: E501
        :type: str
        """

        self._one_field = one_field

    @property
    def one_collection_field(self):
        """Gets the one_collection_field of this Relations.  # noqa: E501


        :return: The one_collection_field of this Relations.  # noqa: E501
        :rtype: str
        """
        return self._one_collection_field

    @one_collection_field.setter
    def one_collection_field(self, one_collection_field):
        """Sets the one_collection_field of this Relations.


        :param one_collection_field: The one_collection_field of this Relations.  # noqa: E501
        :type: str
        """

        self._one_collection_field = one_collection_field

    @property
    def one_allowed_collections(self):
        """Gets the one_allowed_collections of this Relations.  # noqa: E501


        :return: The one_allowed_collections of this Relations.  # noqa: E501
        :rtype: list[str]
        """
        return self._one_allowed_collections

    @one_allowed_collections.setter
    def one_allowed_collections(self, one_allowed_collections):
        """Sets the one_allowed_collections of this Relations.


        :param one_allowed_collections: The one_allowed_collections of this Relations.  # noqa: E501
        :type: list[str]
        """

        self._one_allowed_collections = one_allowed_collections

    @property
    def junction_field(self):
        """Gets the junction_field of this Relations.  # noqa: E501

        Field on the junction table that holds the many field of the related relation.  # noqa: E501

        :return: The junction_field of this Relations.  # noqa: E501
        :rtype: str
        """
        return self._junction_field

    @junction_field.setter
    def junction_field(self, junction_field):
        """Sets the junction_field of this Relations.

        Field on the junction table that holds the many field of the related relation.  # noqa: E501

        :param junction_field: The junction_field of this Relations.  # noqa: E501
        :type: str
        """

        self._junction_field = junction_field

    @property
    def sort_field(self):
        """Gets the sort_field of this Relations.  # noqa: E501


        :return: The sort_field of this Relations.  # noqa: E501
        :rtype: str
        """
        return self._sort_field

    @sort_field.setter
    def sort_field(self, sort_field):
        """Sets the sort_field of this Relations.


        :param sort_field: The sort_field of this Relations.  # noqa: E501
        :type: str
        """

        self._sort_field = sort_field

    @property
    def one_deselect_action(self):
        """Gets the one_deselect_action of this Relations.  # noqa: E501


        :return: The one_deselect_action of this Relations.  # noqa: E501
        :rtype: str
        """
        return self._one_deselect_action

    @one_deselect_action.setter
    def one_deselect_action(self, one_deselect_action):
        """Sets the one_deselect_action of this Relations.


        :param one_deselect_action: The one_deselect_action of this Relations.  # noqa: E501
        :type: str
        """

        self._one_deselect_action = one_deselect_action

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Relations, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Relations):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
