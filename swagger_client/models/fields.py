# coding: utf-8

"""
    Dynamic API Specification

    This is a dynamically generated API specification for all endpoints existing on the current project.  # noqa: E501

    OpenAPI spec version: 10.10.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Fields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'collection': 'str',
        'field': 'str',
        'special': 'list[str]',
        'interface': 'str',
        'options': 'object',
        'display': 'str',
        'display_options': 'object',
        'readonly': 'bool',
        'hidden': 'bool',
        'sort': 'int',
        'width': 'str',
        'translations': 'object',
        'note': 'str',
        'conditions': 'object',
        'required': 'bool',
        'group': 'OneOfFieldsGroup',
        'validation': 'object',
        'validation_message': 'str'
    }

    attribute_map = {
        'id': 'id',
        'collection': 'collection',
        'field': 'field',
        'special': 'special',
        'interface': 'interface',
        'options': 'options',
        'display': 'display',
        'display_options': 'display_options',
        'readonly': 'readonly',
        'hidden': 'hidden',
        'sort': 'sort',
        'width': 'width',
        'translations': 'translations',
        'note': 'note',
        'conditions': 'conditions',
        'required': 'required',
        'group': 'group',
        'validation': 'validation',
        'validation_message': 'validation_message'
    }

    def __init__(self, id=None, collection=None, field=None, special=None, interface=None, options=None, display=None, display_options=None, readonly=None, hidden=None, sort=None, width=None, translations=None, note=None, conditions=None, required=None, group=None, validation=None, validation_message=None):  # noqa: E501
        """Fields - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._collection = None
        self._field = None
        self._special = None
        self._interface = None
        self._options = None
        self._display = None
        self._display_options = None
        self._readonly = None
        self._hidden = None
        self._sort = None
        self._width = None
        self._translations = None
        self._note = None
        self._conditions = None
        self._required = None
        self._group = None
        self._validation = None
        self._validation_message = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if collection is not None:
            self.collection = collection
        if field is not None:
            self.field = field
        if special is not None:
            self.special = special
        if interface is not None:
            self.interface = interface
        if options is not None:
            self.options = options
        if display is not None:
            self.display = display
        if display_options is not None:
            self.display_options = display_options
        if readonly is not None:
            self.readonly = readonly
        if hidden is not None:
            self.hidden = hidden
        if sort is not None:
            self.sort = sort
        if width is not None:
            self.width = width
        if translations is not None:
            self.translations = translations
        if note is not None:
            self.note = note
        if conditions is not None:
            self.conditions = conditions
        if required is not None:
            self.required = required
        if group is not None:
            self.group = group
        if validation is not None:
            self.validation = validation
        if validation_message is not None:
            self.validation_message = validation_message

    @property
    def id(self):
        """Gets the id of this Fields.  # noqa: E501


        :return: The id of this Fields.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Fields.


        :param id: The id of this Fields.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def collection(self):
        """Gets the collection of this Fields.  # noqa: E501

        Unique name of the collection this field is in.  # noqa: E501

        :return: The collection of this Fields.  # noqa: E501
        :rtype: str
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this Fields.

        Unique name of the collection this field is in.  # noqa: E501

        :param collection: The collection of this Fields.  # noqa: E501
        :type: str
        """

        self._collection = collection

    @property
    def field(self):
        """Gets the field of this Fields.  # noqa: E501

        Unique name of the field. Field name is unique within the collection.  # noqa: E501

        :return: The field of this Fields.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this Fields.

        Unique name of the field. Field name is unique within the collection.  # noqa: E501

        :param field: The field of this Fields.  # noqa: E501
        :type: str
        """

        self._field = field

    @property
    def special(self):
        """Gets the special of this Fields.  # noqa: E501


        :return: The special of this Fields.  # noqa: E501
        :rtype: list[str]
        """
        return self._special

    @special.setter
    def special(self, special):
        """Sets the special of this Fields.


        :param special: The special of this Fields.  # noqa: E501
        :type: list[str]
        """

        self._special = special

    @property
    def interface(self):
        """Gets the interface of this Fields.  # noqa: E501


        :return: The interface of this Fields.  # noqa: E501
        :rtype: str
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """Sets the interface of this Fields.


        :param interface: The interface of this Fields.  # noqa: E501
        :type: str
        """

        self._interface = interface

    @property
    def options(self):
        """Gets the options of this Fields.  # noqa: E501


        :return: The options of this Fields.  # noqa: E501
        :rtype: object
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this Fields.


        :param options: The options of this Fields.  # noqa: E501
        :type: object
        """

        self._options = options

    @property
    def display(self):
        """Gets the display of this Fields.  # noqa: E501


        :return: The display of this Fields.  # noqa: E501
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this Fields.


        :param display: The display of this Fields.  # noqa: E501
        :type: str
        """

        self._display = display

    @property
    def display_options(self):
        """Gets the display_options of this Fields.  # noqa: E501


        :return: The display_options of this Fields.  # noqa: E501
        :rtype: object
        """
        return self._display_options

    @display_options.setter
    def display_options(self, display_options):
        """Sets the display_options of this Fields.


        :param display_options: The display_options of this Fields.  # noqa: E501
        :type: object
        """

        self._display_options = display_options

    @property
    def readonly(self):
        """Gets the readonly of this Fields.  # noqa: E501


        :return: The readonly of this Fields.  # noqa: E501
        :rtype: bool
        """
        return self._readonly

    @readonly.setter
    def readonly(self, readonly):
        """Sets the readonly of this Fields.


        :param readonly: The readonly of this Fields.  # noqa: E501
        :type: bool
        """

        self._readonly = readonly

    @property
    def hidden(self):
        """Gets the hidden of this Fields.  # noqa: E501


        :return: The hidden of this Fields.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this Fields.


        :param hidden: The hidden of this Fields.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    @property
    def sort(self):
        """Gets the sort of this Fields.  # noqa: E501


        :return: The sort of this Fields.  # noqa: E501
        :rtype: int
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this Fields.


        :param sort: The sort of this Fields.  # noqa: E501
        :type: int
        """

        self._sort = sort

    @property
    def width(self):
        """Gets the width of this Fields.  # noqa: E501


        :return: The width of this Fields.  # noqa: E501
        :rtype: str
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Fields.


        :param width: The width of this Fields.  # noqa: E501
        :type: str
        """

        self._width = width

    @property
    def translations(self):
        """Gets the translations of this Fields.  # noqa: E501


        :return: The translations of this Fields.  # noqa: E501
        :rtype: object
        """
        return self._translations

    @translations.setter
    def translations(self, translations):
        """Sets the translations of this Fields.


        :param translations: The translations of this Fields.  # noqa: E501
        :type: object
        """

        self._translations = translations

    @property
    def note(self):
        """Gets the note of this Fields.  # noqa: E501


        :return: The note of this Fields.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this Fields.


        :param note: The note of this Fields.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def conditions(self):
        """Gets the conditions of this Fields.  # noqa: E501


        :return: The conditions of this Fields.  # noqa: E501
        :rtype: object
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this Fields.


        :param conditions: The conditions of this Fields.  # noqa: E501
        :type: object
        """

        self._conditions = conditions

    @property
    def required(self):
        """Gets the required of this Fields.  # noqa: E501


        :return: The required of this Fields.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this Fields.


        :param required: The required of this Fields.  # noqa: E501
        :type: bool
        """

        self._required = required

    @property
    def group(self):
        """Gets the group of this Fields.  # noqa: E501


        :return: The group of this Fields.  # noqa: E501
        :rtype: OneOfFieldsGroup
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Fields.


        :param group: The group of this Fields.  # noqa: E501
        :type: OneOfFieldsGroup
        """

        self._group = group

    @property
    def validation(self):
        """Gets the validation of this Fields.  # noqa: E501


        :return: The validation of this Fields.  # noqa: E501
        :rtype: object
        """
        return self._validation

    @validation.setter
    def validation(self, validation):
        """Sets the validation of this Fields.


        :param validation: The validation of this Fields.  # noqa: E501
        :type: object
        """

        self._validation = validation

    @property
    def validation_message(self):
        """Gets the validation_message of this Fields.  # noqa: E501


        :return: The validation_message of this Fields.  # noqa: E501
        :rtype: str
        """
        return self._validation_message

    @validation_message.setter
    def validation_message(self, validation_message):
        """Sets the validation_message of this Fields.


        :param validation_message: The validation_message of this Fields.  # noqa: E501
        :type: str
        """

        self._validation_message = validation_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Fields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Fields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
