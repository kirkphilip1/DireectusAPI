# coding: utf-8

"""
    Dynamic API Specification

    This is a dynamically generated API specification for all endpoints existing on the current project.  # noqa: E501

    OpenAPI spec version: 10.10.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SettingsStorageAssetPresets(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'str',
        'fit': 'str',
        'width': 'int',
        'height': 'int',
        'without_enlargement': 'bool',
        'quality': 'int',
        'format': 'str',
        'transforms': 'list[SettingsTransforms]'
    }

    attribute_map = {
        'key': 'key',
        'fit': 'fit',
        'width': 'width',
        'height': 'height',
        'without_enlargement': 'withoutEnlargement',
        'quality': 'quality',
        'format': 'format',
        'transforms': 'transforms'
    }

    def __init__(self, key=None, fit=None, width=None, height=None, without_enlargement=None, quality=None, format=None, transforms=None):  # noqa: E501
        """SettingsStorageAssetPresets - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._fit = None
        self._width = None
        self._height = None
        self._without_enlargement = None
        self._quality = None
        self._format = None
        self._transforms = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if fit is not None:
            self.fit = fit
        if width is not None:
            self.width = width
        if height is not None:
            self.height = height
        if without_enlargement is not None:
            self.without_enlargement = without_enlargement
        if quality is not None:
            self.quality = quality
        if format is not None:
            self.format = format
        if transforms is not None:
            self.transforms = transforms

    @property
    def key(self):
        """Gets the key of this SettingsStorageAssetPresets.  # noqa: E501

        Key for the asset. Used in the assets endpoint.  # noqa: E501

        :return: The key of this SettingsStorageAssetPresets.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this SettingsStorageAssetPresets.

        Key for the asset. Used in the assets endpoint.  # noqa: E501

        :param key: The key of this SettingsStorageAssetPresets.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def fit(self):
        """Gets the fit of this SettingsStorageAssetPresets.  # noqa: E501

        Whether to crop the thumbnail to match the size, or maintain the aspect ratio.  # noqa: E501

        :return: The fit of this SettingsStorageAssetPresets.  # noqa: E501
        :rtype: str
        """
        return self._fit

    @fit.setter
    def fit(self, fit):
        """Sets the fit of this SettingsStorageAssetPresets.

        Whether to crop the thumbnail to match the size, or maintain the aspect ratio.  # noqa: E501

        :param fit: The fit of this SettingsStorageAssetPresets.  # noqa: E501
        :type: str
        """
        allowed_values = ["cover", "contain", "inside", "outside"]  # noqa: E501
        if fit not in allowed_values:
            raise ValueError(
                "Invalid value for `fit` ({0}), must be one of {1}"  # noqa: E501
                .format(fit, allowed_values)
            )

        self._fit = fit

    @property
    def width(self):
        """Gets the width of this SettingsStorageAssetPresets.  # noqa: E501

        Width of the thumbnail.  # noqa: E501

        :return: The width of this SettingsStorageAssetPresets.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this SettingsStorageAssetPresets.

        Width of the thumbnail.  # noqa: E501

        :param width: The width of this SettingsStorageAssetPresets.  # noqa: E501
        :type: int
        """

        self._width = width

    @property
    def height(self):
        """Gets the height of this SettingsStorageAssetPresets.  # noqa: E501

        Height of the thumbnail.  # noqa: E501

        :return: The height of this SettingsStorageAssetPresets.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this SettingsStorageAssetPresets.

        Height of the thumbnail.  # noqa: E501

        :param height: The height of this SettingsStorageAssetPresets.  # noqa: E501
        :type: int
        """

        self._height = height

    @property
    def without_enlargement(self):
        """Gets the without_enlargement of this SettingsStorageAssetPresets.  # noqa: E501

        No image upscale  # noqa: E501

        :return: The without_enlargement of this SettingsStorageAssetPresets.  # noqa: E501
        :rtype: bool
        """
        return self._without_enlargement

    @without_enlargement.setter
    def without_enlargement(self, without_enlargement):
        """Sets the without_enlargement of this SettingsStorageAssetPresets.

        No image upscale  # noqa: E501

        :param without_enlargement: The without_enlargement of this SettingsStorageAssetPresets.  # noqa: E501
        :type: bool
        """

        self._without_enlargement = without_enlargement

    @property
    def quality(self):
        """Gets the quality of this SettingsStorageAssetPresets.  # noqa: E501

        Quality of the compression used.  # noqa: E501

        :return: The quality of this SettingsStorageAssetPresets.  # noqa: E501
        :rtype: int
        """
        return self._quality

    @quality.setter
    def quality(self, quality):
        """Sets the quality of this SettingsStorageAssetPresets.

        Quality of the compression used.  # noqa: E501

        :param quality: The quality of this SettingsStorageAssetPresets.  # noqa: E501
        :type: int
        """

        self._quality = quality

    @property
    def format(self):
        """Gets the format of this SettingsStorageAssetPresets.  # noqa: E501

        Reformat output image  # noqa: E501

        :return: The format of this SettingsStorageAssetPresets.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this SettingsStorageAssetPresets.

        Reformat output image  # noqa: E501

        :param format: The format of this SettingsStorageAssetPresets.  # noqa: E501
        :type: str
        """
        allowed_values = ["", "jpeg", "png", "webp", "tiff", "avif"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"  # noqa: E501
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def transforms(self):
        """Gets the transforms of this SettingsStorageAssetPresets.  # noqa: E501

        Additional transformations to apply  # noqa: E501

        :return: The transforms of this SettingsStorageAssetPresets.  # noqa: E501
        :rtype: list[SettingsTransforms]
        """
        return self._transforms

    @transforms.setter
    def transforms(self, transforms):
        """Sets the transforms of this SettingsStorageAssetPresets.

        Additional transformations to apply  # noqa: E501

        :param transforms: The transforms of this SettingsStorageAssetPresets.  # noqa: E501
        :type: list[SettingsTransforms]
        """

        self._transforms = transforms

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SettingsStorageAssetPresets, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SettingsStorageAssetPresets):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
