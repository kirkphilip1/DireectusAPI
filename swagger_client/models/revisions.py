# coding: utf-8

"""
    Dynamic API Specification

    This is a dynamically generated API specification for all endpoints existing on the current project.  # noqa: E501

    OpenAPI spec version: 10.10.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Revisions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'activity': 'OneOfRevisionsActivity',
        'collection': 'OneOfRevisionsCollection',
        'item': 'str',
        'data': 'object',
        'delta': 'object',
        'parent': 'int',
        'version': 'OneOfRevisionsVersion'
    }

    attribute_map = {
        'id': 'id',
        'activity': 'activity',
        'collection': 'collection',
        'item': 'item',
        'data': 'data',
        'delta': 'delta',
        'parent': 'parent',
        'version': 'version'
    }

    def __init__(self, id=None, activity=None, collection=None, item=None, data=None, delta=None, parent=None, version=None):  # noqa: E501
        """Revisions - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._activity = None
        self._collection = None
        self._item = None
        self._data = None
        self._delta = None
        self._parent = None
        self._version = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if activity is not None:
            self.activity = activity
        if collection is not None:
            self.collection = collection
        if item is not None:
            self.item = item
        if data is not None:
            self.data = data
        if delta is not None:
            self.delta = delta
        if parent is not None:
            self.parent = parent
        if version is not None:
            self.version = version

    @property
    def id(self):
        """Gets the id of this Revisions.  # noqa: E501

        Unique identifier for the revision.  # noqa: E501

        :return: The id of this Revisions.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Revisions.

        Unique identifier for the revision.  # noqa: E501

        :param id: The id of this Revisions.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def activity(self):
        """Gets the activity of this Revisions.  # noqa: E501

        Unique identifier for the activity record.  # noqa: E501

        :return: The activity of this Revisions.  # noqa: E501
        :rtype: OneOfRevisionsActivity
        """
        return self._activity

    @activity.setter
    def activity(self, activity):
        """Sets the activity of this Revisions.

        Unique identifier for the activity record.  # noqa: E501

        :param activity: The activity of this Revisions.  # noqa: E501
        :type: OneOfRevisionsActivity
        """

        self._activity = activity

    @property
    def collection(self):
        """Gets the collection of this Revisions.  # noqa: E501

        Collection of the updated item.  # noqa: E501

        :return: The collection of this Revisions.  # noqa: E501
        :rtype: OneOfRevisionsCollection
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this Revisions.

        Collection of the updated item.  # noqa: E501

        :param collection: The collection of this Revisions.  # noqa: E501
        :type: OneOfRevisionsCollection
        """

        self._collection = collection

    @property
    def item(self):
        """Gets the item of this Revisions.  # noqa: E501

        Primary key of updated item.  # noqa: E501

        :return: The item of this Revisions.  # noqa: E501
        :rtype: str
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this Revisions.

        Primary key of updated item.  # noqa: E501

        :param item: The item of this Revisions.  # noqa: E501
        :type: str
        """

        self._item = item

    @property
    def data(self):
        """Gets the data of this Revisions.  # noqa: E501

        Copy of item state at time of update.  # noqa: E501

        :return: The data of this Revisions.  # noqa: E501
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Revisions.

        Copy of item state at time of update.  # noqa: E501

        :param data: The data of this Revisions.  # noqa: E501
        :type: object
        """

        self._data = data

    @property
    def delta(self):
        """Gets the delta of this Revisions.  # noqa: E501

        Changes between the previous and the current revision.  # noqa: E501

        :return: The delta of this Revisions.  # noqa: E501
        :rtype: object
        """
        return self._delta

    @delta.setter
    def delta(self, delta):
        """Sets the delta of this Revisions.

        Changes between the previous and the current revision.  # noqa: E501

        :param delta: The delta of this Revisions.  # noqa: E501
        :type: object
        """

        self._delta = delta

    @property
    def parent(self):
        """Gets the parent of this Revisions.  # noqa: E501

        If the current item was updated relationally, this is the id of the parent revision record  # noqa: E501

        :return: The parent of this Revisions.  # noqa: E501
        :rtype: int
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this Revisions.

        If the current item was updated relationally, this is the id of the parent revision record  # noqa: E501

        :param parent: The parent of this Revisions.  # noqa: E501
        :type: int
        """

        self._parent = parent

    @property
    def version(self):
        """Gets the version of this Revisions.  # noqa: E501

        Associated version of this revision.  # noqa: E501

        :return: The version of this Revisions.  # noqa: E501
        :rtype: OneOfRevisionsVersion
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Revisions.

        Associated version of this revision.  # noqa: E501

        :param version: The version of this Revisions.  # noqa: E501
        :type: OneOfRevisionsVersion
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Revisions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Revisions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
